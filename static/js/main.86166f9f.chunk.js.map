{"version":3,"sources":["states/boardState.js","utils/getBombNearCount.js","utils/openCell.js","utils/copyBoard.js","states/endTime.js","states/gameOverState.js","utils/flagBombs.js","actions/win.js","utils/openBombs.js","actions/lose.js","actions/open.js","utils/getOpenNearStatus.js","utils/openNearCells.js","actions/openNear.js","utils/flagCell.js","actions/flag.js","utils/getRandomPoint.js","utils/generateBoardState.js","states/widthState.js","states/heightState.js","states/bombCountState.js","states/startTime.js","actions/start.js","components/Board.js","utils/minMax.js","components/WidthInput.js","components/HeightInput.js","components/BombCountInput.js","components/Settings.js","components/Timer.js","actions/clear.js","components/ClearButton.js","components/FlagCount.js","components/Statistics.js","App.js","index.js"],"names":["boardState","createTagged","getBombNearCount","board","targetCell","offsetY","res","offsetX","row","col","isBomb","openCell","boardCopy","currentCell","cell","itemsToOpen","length","pop","isOpened","isFlag","bombCount","cells","indexOf","push","copyBoard","endTimeState","gameOverState","openBombs","rowsCount","colsCount","win","Date","now","flagBombs","lose","open","getOpenNearStatus","flagsCount","isUnflagBombNear","openNearCells","openNear","openNearStatus","flagCell","flags","flag","getRandomPoint","width","height","Math","floor","random","generateBoardState","excludeRow","excludeCol","minesCount","id","widthState","heightState","bombCountState","startTimeState","start","CELL_SIZE","HALF_CELL_SIZE","BOARD_ID","getEventPoint","event","console","log","rect","document","getElementById","getBoundingClientRect","clientY","top","clientX","left","Board","useTagged","gameOver","boardBoard","useLayoutEffect","ctx","getContext","rows","cols","fillStyle","fillRect","x","y","font","textAlign","textBaseline","fillText","boardWidth","boardHeight","touchTimeoutRef","useRef","style","userSelect","cursor","pointerEvents","undefined","data-is-over","onClick","onDoubleClick","onTouchStart","targetTouches","current","setTimeout","onTouchEnd","clearTimeout","onContextMenu","preventDefault","minMax","min","value","max","WidthInput","defaultValue","type","onBlur","target","HeightInput","BombCountInput","StyledSettings","styled","div","Settings","Timer","useReducer","s","forceUpdate","startTime","endTime","useEffect","intervalId","setInterval","clearInterval","clear","ClearButton","FlagCount","StyledStatistics","Statistics","StyledApp","main","Content","section","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.86166f9f.chunk.js","sourcesContent":["import { createTagged } from 'react-tagged-state';\n\nconst boardState = createTagged(null);\n\nexport default boardState;\n","const getBombNearCount = (board, targetCell) => {\n    let res = 0;\n    let offsetX = -1;\n    let offsetY;\n    let cell;\n\n    for (; offsetX <= 1; ++offsetX) {\n        for (offsetY = -1; offsetY <= 1; ++offsetY) {\n            cell = board.board[offsetY + targetCell.row]?.[offsetX + targetCell.col];\n\n            if (cell?.isBomb) {\n                ++res;\n            }\n        }\n    }\n\n    return res || null;\n};\n\nexport default getBombNearCount;\n","import getBombNearCount from './getBombNearCount';\n\nconst openCell = (boardCopy, targetCell) => {\n    const itemsToOpen = [targetCell];\n    let currentCell;\n    let cell;\n    let offsetX;\n    let offsetY;\n\n    while (itemsToOpen.length) {\n        currentCell = itemsToOpen.pop();\n\n        if (!currentCell || currentCell.isOpened || currentCell.isFlag) {\n            continue;\n        }\n\n        currentCell.isOpened = true;\n        currentCell.bombCount = getBombNearCount(boardCopy, currentCell);\n        boardCopy.cells -= 1;\n\n        if (currentCell.bombCount) {\n            continue;\n        }\n\n        for (offsetX = -1; offsetX <= 1; ++offsetX) {\n            for (offsetY = -1; offsetY <= 1; ++offsetY) {\n                cell = boardCopy.board[offsetY + currentCell.row]?.[offsetX + currentCell.col];\n\n                if (cell && itemsToOpen.indexOf(cell) === -1 && !cell.isOpened && !cell.isFlag) {\n                    itemsToOpen.push(cell);\n                }\n            }\n        }\n    }\n\n    return boardCopy;\n};\n\nexport default openCell;\n","const copyBoard = (board) => ({\n    ...board,\n    board: [...board.board]\n});\n\nexport default copyBoard;\n","import { createTagged } from 'react-tagged-state';\n\nconst endTimeState = createTagged(null);\n\nexport default endTimeState;\n","import { createTagged } from 'react-tagged-state';\n\nconst gameOverState = createTagged(null);\n\nexport default gameOverState;\n","const openBombs = (boardCopy) => {\n    let row = 0;\n    let col;\n    const rowsCount = boardCopy.board.length;\n    const colsCount = boardCopy.board[0].length;\n\n    for (; row < rowsCount; ++row) {\n        for (col = 0; col < colsCount; col++) {\n            if (boardCopy.board[row][col].isBomb) {\n                boardCopy.board[row][col].isFlag = true;\n            }\n        }\n    }\n\n    return boardCopy;\n};\n\nexport default openBombs;\n","import endTimeState from '../states/endTime';\nimport gameOverState from '../states/gameOverState';\nimport boardState from '../states/boardState';\nimport flagBombs from '../utils/flagBombs';\nimport copyBoard from '../utils/copyBoard';\n\nconst win = () => {\n    endTimeState(Date.now());\n    gameOverState('win');\n    boardState((board) => flagBombs(copyBoard(board)));\n};\n\nexport default win;\n","const openBombs = (boardCopy) => {\n    let row = 0;\n    let col;\n    const rowsCount = boardCopy.board.length;\n    const colsCount = boardCopy.board[0].length;\n\n    for (; row < rowsCount; ++row) {\n        for (col = 0; col < colsCount; col++) {\n            if (boardCopy.board[row][col].isBomb) {\n                boardCopy.board[row][col].isOpened = true;\n            }\n        }\n    }\n\n    return boardCopy;\n};\n\nexport default openBombs;\n","import endTimeState from '../states/endTime';\nimport gameOverState from '../states/gameOverState';\nimport boardState from '../states/boardState';\nimport openBombs from '../utils/openBombs';\nimport copyBoard from '../utils/copyBoard';\n\nconst lose = () => {\n    endTimeState(Date.now());\n    gameOverState('lose');\n    boardState((board) => openBombs(copyBoard(board)));\n};\n\nexport default lose;\n","import boardState from '../states/boardState';\nimport openCell from '../utils/openCell';\nimport copyBoard from '../utils/copyBoard';\nimport win from './win';\nimport lose from './lose';\n\nconst open = (cell) => {\n    if (cell.isOpened || cell.isFlag) {\n        return;\n    }\n\n    if (cell.isBomb) {\n        lose();\n\n        return;\n    }\n\n    boardState((board) => openCell(copyBoard(board), cell));\n\n    if (boardState().cells === 0) {\n        win();\n    }\n};\n\nexport default open;\n","const getOpenNearStatus = (board, targetCell) => {\n    let flagsCount = 0;\n    let isUnflagBombNear = false;\n    let offsetX = -1;\n    let offsetY;\n    let cell;\n\n    for (; offsetX <= 1; ++offsetX) {\n        for (offsetY = -1; offsetY <= 1; ++offsetY) {\n            cell = board.board[offsetY + targetCell.row]?.[offsetX + targetCell.col];\n\n            if (cell?.isFlag) {\n                flagsCount++;\n\n                continue;\n            }\n\n            if (cell?.isBomb) {\n                isUnflagBombNear = true;\n            }\n        }\n    }\n\n    return flagsCount === targetCell.bombCount ? (isUnflagBombNear ? -1 : 1) : 0;\n};\n\nexport default getOpenNearStatus;\n","import openCell from './openCell';\n\nconst openNearCells = (boardCopy, targetCell) => {\n    let offsetX = -1;\n    let offsetY;\n\n    for (; offsetX <= 1; ++offsetX) {\n        for (offsetY = -1; offsetY <= 1; ++offsetY) {\n            openCell(boardCopy, boardCopy.board[offsetY + targetCell.row]?.[offsetX + targetCell.col]);\n        }\n    }\n\n    return boardCopy;\n};\n\nexport default openNearCells;\n","import getOpenNearStatus from '../utils/getOpenNearStatus';\nimport boardState from '../states/boardState';\nimport openNearCells from '../utils/openNearCells';\nimport copyBoard from '../utils/copyBoard';\nimport win from './win';\nimport lose from './lose';\n\nconst openNear = (cell) => {\n    const openNearStatus = getOpenNearStatus(boardState(), cell);\n\n    if (openNearStatus === 0) {\n        return;\n    }\n\n    if (openNearStatus === -1) {\n        lose();\n\n        return;\n    }\n\n    boardState((board) => openNearCells(copyBoard(board), cell));\n\n    if (boardState().cells === 0) {\n        win();\n    }\n};\n\nexport default openNear;\n","const flagCell = (boardCopy, cell) => {\n    const isFlag = cell.isFlag;\n\n    boardCopy.board[cell.row][cell.col].isFlag = !isFlag;\n    boardCopy.flags += isFlag ? 1 : -1;\n\n    return boardCopy;\n};\n\nexport default flagCell;\n","import boardState from '../states/boardState';\nimport flagCell from '../utils/flagCell';\nimport copyBoard from '../utils/copyBoard';\n\nconst flag = (cell) => {\n    if (!cell.isOpened && (cell.isFlag || boardState().flags > 0)) {\n        boardState((board) => flagCell(copyBoard(board), cell));\n    }\n};\n\nexport default flag;\n","const getRandomPoint = (width, height) => [Math.floor(Math.random() * height), Math.floor(Math.random() * width)];\n\nexport default getRandomPoint;\n","import getRandomPoint from './getRandomPoint';\n\nconst generateBoardState = (width, height, bombCount, excludeRow, excludeCol) => {\n    const board = [];\n    let minesCount = 0;\n    let row = 0;\n    let col;\n\n    for (; row < height; ++row) {\n        board[row] = [];\n\n        for (col = 0; col < width; ++col) {\n            board[row][col] = {\n                id: row * width + col,\n                row,\n                col,\n                bombCount: null,\n                isBomb: false,\n                isFlag: false,\n                isOpened: false\n            };\n        }\n    }\n\n    while (minesCount < bombCount) {\n        [row, col] = getRandomPoint(width, height);\n\n        if (!board[row][col].isBomb && (row !== excludeRow || excludeCol !== col)) {\n            board[row][col].isBomb = true;\n            ++minesCount;\n        }\n    }\n\n    return {\n        board,\n        flags: bombCount,\n        cells: width * height - bombCount\n    };\n};\n\nexport default generateBoardState;\n","import { createTagged } from 'react-tagged-state';\n\nconst widthState = createTagged(30);\n\nexport default widthState;\n","import { createTagged } from 'react-tagged-state';\n\nconst heightState = createTagged(16);\n\nexport default heightState;\n","import { createTagged } from 'react-tagged-state';\n\nconst bombCountState = createTagged(99);\n\nexport default bombCountState;\n","import { createTagged } from 'react-tagged-state';\n\nconst startTimeState = createTagged(null);\n\nexport default startTimeState;\n","import boardState from '../states/boardState';\nimport generateBoardState from '../utils/generateBoardState';\nimport widthState from '../states/widthState';\nimport heightState from '../states/heightState';\nimport bombCountState from '../states/bombCountState';\nimport startTimeState from '../states/startTime';\nimport open from './open';\n\nconst start = (row, col) => {\n    boardState(generateBoardState(widthState(), heightState(), bombCountState(), row, col));\n    startTimeState(Date.now());\n\n    open(boardState().board[row][col]);\n};\n\nexport default start;\n","import { useLayoutEffect, useRef } from 'react';\nimport { useTagged } from 'react-tagged-state';\nimport open from '../actions/open';\nimport openNear from '../actions/openNear';\nimport flag from '../actions/flag';\nimport start from '../actions/start';\nimport boardState from '../states/boardState';\nimport gameOverState from '../states/gameOverState';\nimport widthState from '../states/widthState';\nimport heightState from '../states/heightState';\nimport generateBoardState from '../utils/generateBoardState';\n\nconst CELL_SIZE = 20;\n\nconst HALF_CELL_SIZE = CELL_SIZE / 2;\n\nconst BOARD_ID = 'BOARD_ID';\n\nconst getEventPoint = (event) => {\n    console.log(event);\n    const rect = document.getElementById(BOARD_ID).getBoundingClientRect();\n\n    return [Math.floor((event.clientY - rect.top) / CELL_SIZE), Math.floor((event.clientX - rect.left) / CELL_SIZE)];\n};\n\nconst Board = () => {\n    const board = useTagged(boardState);\n    const gameOver = useTagged(gameOverState);\n    const width = useTagged(widthState);\n    const height = useTagged(heightState);\n    const boardBoard = board ? board.board : generateBoardState(width, height, 0).board;\n\n    useLayoutEffect(() => {\n        const ctx = document.getElementById(BOARD_ID).getContext('2d');\n        let row = 0;\n        let col = 0;\n        const rows = boardBoard.length;\n        const cols = boardBoard[0].length;\n        ctx.fillStyle = 'black';\n        ctx.fillRect(0, 0, cols * CELL_SIZE, rows * CELL_SIZE);\n\n        for (; row < rows; ++row) {\n            for (col = 0; col < cols; ++col) {\n                const cell = boardBoard[row][col];\n                const x = cell.col * CELL_SIZE;\n                const y = cell.row * CELL_SIZE;\n\n                ctx.fillStyle = cell.isOpened ? 'aliceblue' : 'lightgray';\n                ctx.fillRect(x, y, CELL_SIZE - 1, CELL_SIZE - 1);\n                ctx.font =\n                    \"12px -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif\";\n                ctx.textAlign = 'center';\n                ctx.textBaseline = 'middle';\n\n                if (!cell.isOpened) {\n                    if (cell.isFlag) {\n                        ctx.fillText('🚩', x + HALF_CELL_SIZE - 1, y + HALF_CELL_SIZE);\n\n                        continue;\n                    }\n\n                    continue;\n                }\n\n                if (cell.isBomb) {\n                    if (cell.isFlag) {\n                        ctx.fillText('✅', x + HALF_CELL_SIZE - 1, y + HALF_CELL_SIZE);\n\n                        continue;\n                    }\n\n                    ctx.fillText('💣', x + HALF_CELL_SIZE - 1, y + HALF_CELL_SIZE);\n\n                    continue;\n                }\n\n                if (!cell.bombCount) {\n                    continue;\n                }\n\n                switch (cell.bombCount) {\n                    case 1: {\n                        ctx.fillStyle = 'blue';\n\n                        break;\n                    }\n                    case 2: {\n                        ctx.fillStyle = 'green';\n\n                        break;\n                    }\n                    case 3: {\n                        ctx.fillStyle = 'red';\n\n                        break;\n                    }\n                    case 4: {\n                        ctx.fillStyle = 'purple';\n\n                        break;\n                    }\n                    case 5: {\n                        ctx.fillStyle = 'maroon';\n\n                        break;\n                    }\n                    case 6: {\n                        ctx.fillStyle = 'turquoise';\n\n                        break;\n                    }\n                    case 7: {\n                        ctx.fillStyle = 'black';\n\n                        break;\n                    }\n                    case 8: {\n                        ctx.fillStyle = 'gray';\n\n                        break;\n                    }\n                }\n\n                ctx.fillText(cell.bombCount, x + HALF_CELL_SIZE - 1, y + HALF_CELL_SIZE);\n            }\n        }\n    }, [boardBoard]);\n    const boardWidth = boardBoard[0].length * CELL_SIZE;\n    const boardHeight = boardBoard.length * CELL_SIZE;\n    const touchTimeoutRef = useRef(null);\n\n    return (\n        <canvas\n            id={BOARD_ID}\n            style={{\n                width: boardWidth,\n                height: boardHeight,\n                userSelect: 'none',\n                cursor: 'pointer',\n                pointerEvents: gameOver ? 'none' : undefined\n            }}\n            data-is-over={!!gameOver}\n            width={boardWidth}\n            height={boardHeight}\n            onClick={(event) => {\n                const [row, col] = getEventPoint(event);\n\n                if (board) {\n                    open(boardBoard[row][col]);\n\n                    return;\n                }\n\n                start(row, col);\n            }}\n            onDoubleClick={\n                board\n                    ? (event) => {\n                          const [row, col] = getEventPoint(event);\n\n                          openNear(boardBoard[row][col]);\n                      }\n                    : null\n            }\n            onTouchStart={\n                board\n                    ? (event) => {\n                          const [row, col] = getEventPoint(event.targetTouches[0]);\n                          const cell = boardBoard[row][col];\n\n                          touchTimeoutRef.current = setTimeout(() => {\n                              if (cell.isOpened) {\n                                  openNear(cell);\n\n                                  return;\n                              }\n\n                              flag(cell);\n                          }, 250);\n                      }\n                    : null\n            }\n            onTouchEnd={\n                board\n                    ? () => {\n                          clearTimeout(touchTimeoutRef.current);\n                          touchTimeoutRef.current = null;\n                      }\n                    : null\n            }\n            onContextMenu={\n                board\n                    ? (event) => {\n                          event.preventDefault();\n\n                          if (!touchTimeoutRef.current) {\n                              const [row, col] = getEventPoint(event);\n\n                              flag(boardBoard[row][col]);\n                          }\n                      }\n                    : null\n            }\n        />\n    );\n};\n\nexport default Board;\n","const minMax = (min, value, max) => Math.max(Math.min(value, max), min);\n\nexport default minMax;\n","import { useTagged } from 'react-tagged-state';\nimport widthState from '../states/widthState';\nimport minMax from '../utils/minMax';\n\nconst WidthInput = () => {\n    const width = useTagged(widthState);\n\n    return (\n        <label>\n            Width:\n            <input\n                key={width}\n                defaultValue={width}\n                type=\"number\"\n                onBlur={(event) => widthState(minMax(8, event.target.value, 99))}\n                min={8}\n                max={99}\n            />\n        </label>\n    );\n};\n\nexport default WidthInput;\n","import { useTagged } from 'react-tagged-state';\nimport heightState from '../states/heightState';\nimport minMax from '../utils/minMax';\n\nconst HeightInput = () => {\n    const height = useTagged(heightState);\n\n    return (\n        <label>\n            Height:\n            <input\n                key={height}\n                defaultValue={height}\n                type=\"number\"\n                onBlur={(event) => heightState(minMax(1, event.target.value, 99))}\n                min={8}\n                max={99}\n            />\n        </label>\n    );\n};\n\nexport default HeightInput;\n","import { useTagged } from 'react-tagged-state';\nimport bombCountState from '../states/bombCountState';\nimport widthState from '../states/widthState';\nimport heightState from '../states/heightState';\nimport minMax from '../utils/minMax';\n\nconst BombCountInput = () => {\n    const bombCount = useTagged(bombCountState);\n\n    return (\n        <label>\n            Bomb count:\n            <input\n                key={bombCount}\n                defaultValue={bombCount}\n                type=\"number\"\n                onBlur={(event) => bombCountState(minMax(0, event.target.value, widthState() * heightState() - 1))}\n                min={0}\n                max={9800}\n            />\n        </label>\n    );\n};\n\nexport default BombCountInput;\n","import styled from 'styled-components';\nimport WidthInput from './WidthInput';\nimport HeightInput from './HeightInput';\nimport BombCountInput from './BombCountInput';\n\nconst StyledSettings = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 10px;\n`;\n\nconst Settings = () => (\n    <StyledSettings>\n        <WidthInput />\n        <HeightInput />\n        <BombCountInput />\n    </StyledSettings>\n);\n\nexport default Settings;\n","import { useEffect, useReducer } from 'react';\nimport { useTagged } from 'react-tagged-state';\nimport endTimeState from '../states/endTime';\nimport startTimeState from '../states/startTime';\n\nconst Timer = () => {\n    const [, forceUpdate] = useReducer((s) => s + 1, 0);\n    const startTime = useTagged(startTimeState);\n    const endTime = useTagged(endTimeState);\n\n    useEffect(() => {\n        let intervalId;\n\n        if (!endTime && !!startTime) {\n            intervalId = setInterval(() => {\n                forceUpdate();\n            }, 1000);\n        }\n\n        return () => {\n            clearInterval(intervalId);\n        };\n    }, [startTime, endTime]);\n\n    return <span>Time:{startTime ? Math.floor(((endTime || Date.now()) - startTime) / 1000) : 0}</span>;\n};\n\nexport default Timer;\n","import boardState from '../states/boardState';\nimport startTimeState from '../states/startTime';\nimport endTimeState from '../states/endTime';\nimport gameOverState from '../states/gameOverState';\n\nconst clear = () => {\n    boardState(null);\n    startTimeState(null);\n    endTimeState(null);\n    gameOverState(null);\n};\n\nexport default clear;\n","import { useTagged } from 'react-tagged-state';\nimport gameOverState from '../states/gameOverState';\nimport clear from '../actions/clear';\n\nconst ClearButton = () => {\n    const gameOver = useTagged(gameOverState);\n\n    return <button onClick={clear}>{gameOver === 'win' ? '😎' : gameOver === 'lose' ? '😵' : '😊'}</button>;\n};\n\nexport default ClearButton;\n","import { useTagged } from 'react-tagged-state';\nimport bombCountState from '../states/bombCountState';\nimport boardState from '../states/boardState';\n\nconst FlagCount = () => {\n    const bombCount = useTagged(bombCountState);\n    const flags = useTagged(boardState`flags`);\n\n    return <span>Flags:{typeof flags === 'number' ? flags : bombCount}</span>;\n};\n\nexport default FlagCount;\n","import styled from 'styled-components';\nimport Timer from './Timer';\nimport ClearButton from './ClearButton';\nimport FlagCount from './FlagCount';\n\nconst StyledStatistics = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 10px;\n`;\n\nconst Statistics = () => (\n    <StyledStatistics>\n        <FlagCount />\n        <ClearButton />\n        <Timer />\n    </StyledStatistics>\n);\n\nexport default Statistics;\n","import styled from 'styled-components';\nimport Board from './components/Board';\nimport Settings from './components/Settings';\nimport Statistics from './components/Statistics';\n\nconst StyledApp = styled.main`\n    display: flex;\n    flex-direction: column;\n    margin: auto;\n    height: calc(100vh - 20px);\n    padding-top: 20px;\n    width: calc(100vw - 40px);\n    align-items: center;\n`;\n\nconst Content = styled.section`\n    display: flex;\n    overflow: auto;\n    max-width: 100%;\n    border-top: 1px solid black;\n    border-left: 1px solid black;\n`;\n\nconst App = () => (\n    <StyledApp>\n        <Settings />\n        <Statistics />\n        <Content>\n            <Board />\n        </Content>\n    </StyledApp>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}