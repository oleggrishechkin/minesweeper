{"version":3,"sources":["states/boardState.js","states/gameOverState.js","utils/getBombNearCount.js","utils/openCell.js","utils/copyBoard.js","states/endTime.js","utils/flagBombs.js","actions/win.js","utils/openBombs.js","actions/lose.js","actions/open.js","utils/getOpenNearStatus.js","utils/openNearCells.js","actions/openNear.js","utils/flagCell.js","actions/flag.js","components/StyledCell.js","components/Cell.js","components/StyledBoard.js","states/widthState.js","states/heightState.js","utils/getRandomPoint.js","utils/generateBoardState.js","states/bombCountState.js","states/startTime.js","actions/start.js","components/EmptyCell.js","components/EmptyBoard.js","components/Board.js","utils/minMax.js","components/WidthInput.js","components/HeightInput.js","components/BombCountInput.js","components/Settings.js","components/Timer.js","actions/clear.js","components/ClearButton.js","components/FlagCount.js","components/Statistics.js","App.js","index.js"],"names":["boardState","createTagged","gameOverState","getBombNearCount","board","targetCell","offsetY","res","offsetX","row","col","isBomb","openCell","boardCopy","currentCell","cell","itemsToOpen","length","pop","isOpened","isFlag","bombCount","cells","indexOf","push","copyBoard","endTimeState","openBombs","rowsCount","colsCount","win","Date","now","flagBombs","lose","open","getOpenNearStatus","flagsCount","isUnflagBombNear","openNearCells","openNear","openNearStatus","flagCell","flags","flag","StyledCell","styled","button","Cell","memo","data-is-opened","data-count","onClick","onDoubleClick","onContextMenu","event","preventDefault","StyledBoard","div","widthState","heightState","getRandomPoint","width","height","Math","floor","random","generateBoardState","excludeRow","excludeCol","minesCount","id","bombCountState","startTimeState","start","EmptyCell","index","EmptyBoard","useTagged","style","Array","fill","map","Board","gameOver","data-is-over","minMax","min","value","max","WidthInput","defaultValue","type","onBlur","target","HeightInput","BombCountInput","StyledSettings","Settings","Timer","useReducer","s","forceUpdate","startTime","endTime","useEffect","intervalId","setInterval","clearInterval","clear","ClearButton","FlagCount","StyledStatistics","Statistics","StyledApp","main","Content","section","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e68437da.chunk.js","sourcesContent":["import { createTagged } from 'react-tagged-state';\n\nconst boardState = createTagged(null);\n\nexport default boardState;\n","import { createTagged } from 'react-tagged-state';\n\nconst gameOverState = createTagged(null);\n\nexport default gameOverState;\n","const getBombNearCount = (board, targetCell) => {\n    let res = 0;\n    let offsetX = -1;\n    let offsetY;\n    let cell;\n\n    for (; offsetX <= 1; ++offsetX) {\n        for (offsetY = -1; offsetY <= 1; ++offsetY) {\n            cell = board.board[offsetY + targetCell.row]?.[offsetX + targetCell.col];\n\n            if (cell?.isBomb) {\n                ++res;\n            }\n        }\n    }\n\n    return res || null;\n};\n\nexport default getBombNearCount;\n","import getBombNearCount from './getBombNearCount';\n\nconst openCell = (boardCopy, targetCell) => {\n    const itemsToOpen = [targetCell];\n    let currentCell;\n    let cell;\n    let offsetX;\n    let offsetY;\n\n    while (itemsToOpen.length) {\n        currentCell = itemsToOpen.pop();\n\n        if (!currentCell || currentCell.isOpened || currentCell.isFlag) {\n            continue;\n        }\n\n        currentCell = boardCopy.board[currentCell.row][currentCell.col] = {\n            ...currentCell,\n            bombCount: getBombNearCount(boardCopy, currentCell),\n            isOpened: true\n        };\n        boardCopy.cells -= 1;\n\n        if (currentCell.bombCount) {\n            continue;\n        }\n\n        for (offsetX = -1; offsetX <= 1; ++offsetX) {\n            for (offsetY = -1; offsetY <= 1; ++offsetY) {\n                cell = boardCopy.board[offsetY + currentCell.row]?.[offsetX + currentCell.col];\n\n                if (cell && itemsToOpen.indexOf(cell) === -1 && !cell.isOpened && !cell.isFlag) {\n                    itemsToOpen.push(cell);\n                }\n            }\n        }\n    }\n\n    return boardCopy;\n};\n\nexport default openCell;\n","const copyBoard = (board) => ({\n    ...board,\n    board: [...board.board]\n});\n\nexport default copyBoard;\n","import { createTagged } from 'react-tagged-state';\n\nconst endTimeState = createTagged(null);\n\nexport default endTimeState;\n","const openBombs = (boardCopy) => {\n    let row = 0;\n    let col;\n    const rowsCount = boardCopy.board.length;\n    const colsCount = boardCopy.board[0].length;\n\n    for (; row < rowsCount; ++row) {\n        for (col = 0; col < colsCount; col++) {\n            if (boardCopy.board[row][col].isBomb) {\n                boardCopy.board[row][col] = { ...boardCopy.board[row][col], isFlag: true };\n            }\n        }\n    }\n\n    return boardCopy;\n};\n\nexport default openBombs;\n","import endTimeState from '../states/endTime';\nimport gameOverState from '../states/gameOverState';\nimport boardState from '../states/boardState';\nimport flagBombs from '../utils/flagBombs';\nimport copyBoard from '../utils/copyBoard';\n\nconst win = () => {\n    endTimeState(Date.now());\n    gameOverState('win');\n    boardState((board) => flagBombs(copyBoard(board)));\n};\n\nexport default win;\n","const openBombs = (boardCopy) => {\n    let row = 0;\n    let col;\n    const rowsCount = boardCopy.board.length;\n    const colsCount = boardCopy.board[0].length;\n\n    for (; row < rowsCount; ++row) {\n        for (col = 0; col < colsCount; col++) {\n            if (boardCopy.board[row][col].isBomb) {\n                boardCopy.board[row][col] = { ...boardCopy.board[row][col], isOpened: true };\n            }\n        }\n    }\n\n    return boardCopy;\n};\n\nexport default openBombs;\n","import endTimeState from '../states/endTime';\nimport gameOverState from '../states/gameOverState';\nimport boardState from '../states/boardState';\nimport openBombs from '../utils/openBombs';\nimport copyBoard from '../utils/copyBoard';\n\nconst lose = () => {\n    endTimeState(Date.now());\n    gameOverState('lose');\n    boardState((board) => openBombs(copyBoard(board)));\n};\n\nexport default lose;\n","import boardState from '../states/boardState';\nimport openCell from '../utils/openCell';\nimport copyBoard from '../utils/copyBoard';\nimport win from './win';\nimport lose from './lose';\n\nconst open = (cell) => {\n    if (cell.isOpened || cell.isFlag) {\n        return;\n    }\n\n    if (cell.isBomb) {\n        lose();\n\n        return;\n    }\n\n    boardState((board) => openCell(copyBoard(board), cell));\n\n    if (boardState().cells === 0) {\n        win();\n    }\n};\n\nexport default open;\n","const getOpenNearStatus = (board, targetCell) => {\n    let flagsCount = 0;\n    let isUnflagBombNear = false;\n    let offsetX = -1;\n    let offsetY;\n    let cell;\n\n    for (; offsetX <= 1; ++offsetX) {\n        for (offsetY = -1; offsetY <= 1; ++offsetY) {\n            cell = board.board[offsetY + targetCell.row]?.[offsetX + targetCell.col];\n\n            if (cell?.isFlag) {\n                flagsCount++;\n\n                continue;\n            }\n\n            if (cell?.isBomb) {\n                isUnflagBombNear = true;\n            }\n        }\n    }\n\n    return flagsCount === targetCell.bombCount ? (isUnflagBombNear ? -1 : 1) : 0;\n};\n\nexport default getOpenNearStatus;\n","import openCell from './openCell';\n\nconst openNearCells = (boardCopy, targetCell) => {\n    let offsetX = -1;\n    let offsetY;\n\n    for (; offsetX <= 1; ++offsetX) {\n        for (offsetY = -1; offsetY <= 1; ++offsetY) {\n            openCell(boardCopy, boardCopy.board[offsetY + targetCell.row]?.[offsetX + targetCell.col]);\n        }\n    }\n\n    return boardCopy;\n};\n\nexport default openNearCells;\n","import getOpenNearStatus from '../utils/getOpenNearStatus';\nimport boardState from '../states/boardState';\nimport openNearCells from '../utils/openNearCells';\nimport copyBoard from '../utils/copyBoard';\nimport win from './win';\nimport lose from './lose';\n\nconst openNear = (cell) => {\n    const openNearStatus = getOpenNearStatus(boardState(), cell);\n\n    if (openNearStatus === 0) {\n        return;\n    }\n\n    if (openNearStatus === -1) {\n        lose();\n\n        return;\n    }\n\n    boardState((board) => openNearCells(copyBoard(board), cell));\n\n    if (boardState().cells === 0) {\n        win();\n    }\n};\n\nexport default openNear;\n","const flagCell = (boardCopy, cell) => {\n    const isFlag = cell.isFlag;\n\n    boardCopy.board[cell.row][cell.col] = { ...boardCopy.board[cell.row][cell.col], isFlag: !cell.isFlag };\n    boardCopy.flags += isFlag ? 1 : -1;\n\n    return boardCopy;\n};\n\nexport default flagCell;\n","import boardState from '../states/boardState';\nimport flagCell from '../utils/flagCell';\nimport copyBoard from '../utils/copyBoard';\n\nconst flag = (cell) => {\n    if (!cell.isOpened && (cell.isFlag || boardState().flags > 0)) {\n        boardState((board) => flagCell(copyBoard(board), cell));\n    }\n};\n\nexport default flag;\n","import styled from 'styled-components';\n\nconst StyledCell = styled.button`\n    background: lightgray;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: none;\n    outline: none;\n    border-radius: 0;\n    border-right: 1px solid black;\n    border-bottom: 1px solid black;\n    cursor: pointer;\n    &:active {\n        background: aliceblue;\n    }\n    &[data-is-opened='true'] {\n        background: aliceblue;\n    }\n    &[data-count='1'] {\n        color: blue;\n    }\n    &[data-count='2'] {\n        color: green;\n    }\n    &[data-count='3'] {\n        color: red;\n    }\n    &[data-count='4'] {\n        color: purple;\n    }\n    &[data-count='5'] {\n        color: maroon;\n    }\n    &[data-count='6'] {\n        color: turquoise;\n    }\n    &[data-count='7'] {\n        color: black;\n    }\n    &[data-count='8'] {\n        color: gray;\n    }\n`;\n\nexport default StyledCell;\n","import { memo } from 'react';\nimport open from '../actions/open';\nimport openNear from '../actions/openNear';\nimport flag from '../actions/flag';\nimport StyledCell from './StyledCell';\n\nconst Cell = memo(({ cell }) => (\n    <StyledCell\n        data-is-opened={cell.isOpened}\n        data-count={cell.bombCount}\n        onClick={() => open(cell)}\n        onDoubleClick={() => openNear(cell)}\n        onContextMenu={(event) => {\n            event.preventDefault();\n\n            flag(cell);\n        }}\n    >\n        {!cell.isOpened && cell.isFlag && '🚩'}\n        {cell.isOpened && cell.isBomb && (cell.isFlag ? '✅' : '💣')}\n        {cell.isOpened && !cell.isBomb && !cell.isFlag && cell.bombCount}\n    </StyledCell>\n));\n\nexport default Cell;\n","import styled from 'styled-components';\n\nconst StyledBoard = styled.div`\n    display: grid;\n    grid-template-rows: repeat(var(--rows), 20px);\n    grid-template-columns: repeat(var(--columns), 20px);\n    user-select: none;\n    &[data-is-over='true'] {\n        pointer-events: none;\n    }\n`;\n\nexport default StyledBoard;\n","import { createTagged } from 'react-tagged-state';\n\nconst widthState = createTagged(30);\n\nexport default widthState;\n","import { createTagged } from 'react-tagged-state';\n\nconst heightState = createTagged(16);\n\nexport default heightState;\n","const getRandomPoint = (width, height) => [Math.floor(Math.random() * height), Math.floor(Math.random() * width)];\n\nexport default getRandomPoint;\n","import getRandomPoint from './getRandomPoint';\n\nconst generateBoardState = (width, height, bombCount, excludeRow, excludeCol) => {\n    const board = [];\n    let minesCount = 0;\n    let row = 0;\n    let col;\n\n    for (; row < height; ++row) {\n        board[row] = [];\n\n        for (col = 0; col < width; ++col) {\n            board[row][col] = {\n                id: row * width + col,\n                row,\n                col,\n                bombCount: null,\n                isBomb: false,\n                isFlag: false,\n                isOpened: false\n            };\n        }\n    }\n\n    while (minesCount < bombCount) {\n        [row, col] = getRandomPoint(width, height);\n\n        if (!board[row][col].isBomb && (row !== excludeRow || excludeCol !== col)) {\n            board[row][col].isBomb = true;\n            ++minesCount;\n        }\n    }\n\n    return {\n        board,\n        flags: bombCount,\n        cells: width * height - bombCount\n    };\n};\n\nexport default generateBoardState;\n","import { createTagged } from 'react-tagged-state';\n\nconst bombCountState = createTagged(99);\n\nexport default bombCountState;\n","import { createTagged } from 'react-tagged-state';\n\nconst startTimeState = createTagged(null);\n\nexport default startTimeState;\n","import boardState from '../states/boardState';\nimport generateBoardState from '../utils/generateBoardState';\nimport widthState from '../states/widthState';\nimport heightState from '../states/heightState';\nimport bombCountState from '../states/bombCountState';\nimport startTimeState from '../states/startTime';\nimport open from './open';\n\nconst start = (row, col) => {\n    boardState(generateBoardState(widthState(), heightState(), bombCountState(), row, col));\n    startTimeState(Date.now());\n\n    open(boardState().board[row][col]);\n};\n\nexport default start;\n","import { memo } from 'react';\nimport start from '../actions/start';\nimport StyledCell from './StyledCell';\n\nconst EmptyCell = memo(({ index, width }) => (\n    <StyledCell\n        onClick={() => {\n            const row = Math.floor(index / width);\n            const col = index - row * width;\n\n            start(row, col);\n        }}\n        onContextMenu={(event) => {\n            event.preventDefault();\n        }}\n    />\n));\n\nexport default EmptyCell;\n","import { useTagged } from 'react-tagged-state';\nimport widthState from '../states/widthState';\nimport heightState from '../states/heightState';\nimport StyledBoard from './StyledBoard';\nimport EmptyCell from './EmptyCell';\n\nconst EmptyBoard = () => {\n    const width = useTagged(widthState);\n    const height = useTagged(heightState);\n\n    return (\n        <StyledBoard style={{ '--rows': height, '--columns': width }}>\n            {new Array(width * height).fill(null).map((cell, index) => (\n                <EmptyCell key={index} index={index} width={width} />\n            ))}\n        </StyledBoard>\n    );\n};\n\nexport default EmptyBoard;\n","import { useTagged } from 'react-tagged-state';\nimport boardState from '../states/boardState';\nimport gameOverState from '../states/gameOverState';\nimport Cell from './Cell';\nimport StyledBoard from './StyledBoard';\nimport EmptyBoard from './EmptyBoard';\n\nconst Board = () => {\n    const board = useTagged(boardState);\n    const gameOver = useTagged(gameOverState);\n\n    if (!board) {\n        return <EmptyBoard />;\n    }\n\n    return (\n        <StyledBoard\n            style={{ '--rows': board.board.length, '--columns': board.board[0].length }}\n            data-is-over={!!gameOver}\n        >\n            {/* eslint-disable-next-line react/jsx-key */}\n            {board.board.map((row) => row.map((cell) => <Cell key={cell.id} cell={cell} />))}\n        </StyledBoard>\n    );\n};\n\nexport default Board;\n","const minMax = (min, value, max) => Math.max(Math.min(value, max), min);\n\nexport default minMax;\n","import { useTagged } from 'react-tagged-state';\nimport widthState from '../states/widthState';\nimport minMax from '../utils/minMax';\n\nconst WidthInput = () => {\n    const width = useTagged(widthState);\n\n    return (\n        <label>\n            Width:\n            <input\n                key={width}\n                defaultValue={width}\n                type=\"number\"\n                onBlur={(event) => widthState(minMax(8, event.target.value, 99))}\n                min={8}\n                max={99}\n            />\n        </label>\n    );\n};\n\nexport default WidthInput;\n","import { useTagged } from 'react-tagged-state';\nimport heightState from '../states/heightState';\nimport minMax from '../utils/minMax';\n\nconst HeightInput = () => {\n    const height = useTagged(heightState);\n\n    return (\n        <label>\n            Height:\n            <input\n                key={height}\n                defaultValue={height}\n                type=\"number\"\n                onBlur={(event) => heightState(minMax(1, event.target.value, 99))}\n                min={8}\n                max={99}\n            />\n        </label>\n    );\n};\n\nexport default HeightInput;\n","import { useTagged } from 'react-tagged-state';\nimport bombCountState from '../states/bombCountState';\nimport widthState from '../states/widthState';\nimport heightState from '../states/heightState';\nimport minMax from '../utils/minMax';\n\nconst BombCountInput = () => {\n    const bombCount = useTagged(bombCountState);\n\n    return (\n        <label>\n            Bomb count:\n            <input\n                key={bombCount}\n                defaultValue={bombCount}\n                type=\"number\"\n                onBlur={(event) => bombCountState(minMax(0, event.target.value, widthState() * heightState() - 1))}\n                min={0}\n                max={9800}\n            />\n        </label>\n    );\n};\n\nexport default BombCountInput;\n","import styled from 'styled-components';\nimport WidthInput from './WidthInput';\nimport HeightInput from './HeightInput';\nimport BombCountInput from './BombCountInput';\n\nconst StyledSettings = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 10px;\n`;\n\nconst Settings = () => (\n    <StyledSettings>\n        <WidthInput />\n        <HeightInput />\n        <BombCountInput />\n    </StyledSettings>\n);\n\nexport default Settings;\n","import { useEffect, useReducer } from 'react';\nimport { useTagged } from 'react-tagged-state';\nimport endTimeState from '../states/endTime';\nimport startTimeState from '../states/startTime';\n\nconst Timer = () => {\n    const [, forceUpdate] = useReducer((s) => s + 1, 0);\n    const startTime = useTagged(startTimeState);\n    const endTime = useTagged(endTimeState);\n\n    useEffect(() => {\n        let intervalId;\n\n        if (!endTime && !!startTime) {\n            intervalId = setInterval(() => {\n                forceUpdate();\n            }, 1000);\n        }\n\n        return () => {\n            clearInterval(intervalId);\n        };\n    }, [startTime, endTime]);\n\n    return <span>Time:{startTime ? Math.floor(((endTime || Date.now()) - startTime) / 1000) : 0}</span>;\n};\n\nexport default Timer;\n","import boardState from '../states/boardState';\nimport startTimeState from '../states/startTime';\nimport endTimeState from '../states/endTime';\nimport gameOverState from '../states/gameOverState';\n\nconst clear = () => {\n    boardState(null);\n    startTimeState(null);\n    endTimeState(null);\n    gameOverState(null);\n};\n\nexport default clear;\n","import { useTagged } from 'react-tagged-state';\nimport gameOverState from '../states/gameOverState';\nimport clear from '../actions/clear';\n\nconst ClearButton = () => {\n    const gameOver = useTagged(gameOverState);\n\n    return <button onClick={clear}>{gameOver === 'win' ? '😎' : gameOver === 'lose' ? '😵' : '😊'}</button>;\n};\n\nexport default ClearButton;\n","import { useTagged } from 'react-tagged-state';\nimport bombCountState from '../states/bombCountState';\nimport boardState from '../states/boardState';\n\nconst FlagCount = () => {\n    const bombCount = useTagged(bombCountState);\n    const flags = useTagged(boardState`flags`);\n\n    return <span>Flags:{typeof flags === 'number' ? flags : bombCount}</span>;\n};\n\nexport default FlagCount;\n","import styled from 'styled-components';\nimport Timer from './Timer';\nimport ClearButton from './ClearButton';\nimport FlagCount from './FlagCount';\n\nconst StyledStatistics = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 10px;\n`;\n\nconst Statistics = () => (\n    <StyledStatistics>\n        <FlagCount />\n        <ClearButton />\n        <Timer />\n    </StyledStatistics>\n);\n\nexport default Statistics;\n","import styled from 'styled-components';\nimport Board from './components/Board';\nimport Settings from './components/Settings';\nimport Statistics from './components/Statistics';\n\nconst StyledApp = styled.main`\n    display: flex;\n    flex-direction: column;\n    margin: auto;\n    height: calc(100vh - 20px);\n    padding-top: 20px;\n    width: calc(100vw - 40px);\n    align-items: center;\n`;\n\nconst Content = styled.section`\n    display: flex;\n    overflow: auto;\n    max-width: 100%;\n    border-top: 1px solid black;\n    border-left: 1px solid black;\n`;\n\nconst App = () => (\n    <StyledApp>\n        <Settings />\n        <Statistics />\n        <Content>\n            <Board />\n        </Content>\n    </StyledApp>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}