{"version":3,"sources":["states/boardState.ts","utils/getBombNearCount.ts","utils/openCell.ts","utils/copyBoard.ts","states/endTime.ts","states/gameOverState.ts","utils/flagBombs.ts","actions/win.ts","utils/openBombs.ts","actions/lose.ts","actions/open.ts","utils/getOpenNearStatus.ts","utils/openNearCells.ts","actions/openNear.ts","utils/flagCell.ts","actions/flag.ts","utils/getRandomPoint.ts","utils/generateBoardState.ts","states/widthState.ts","states/heightState.ts","states/bombCountState.ts","states/startTime.ts","actions/start.ts","components/Board.tsx","utils/minMax.ts","components/WidthInput.tsx","components/HeightInput.tsx","components/BombCountInput.tsx","components/Settings.tsx","components/Timer.tsx","actions/clear.ts","components/ClearButton.tsx","components/FlagCount.tsx","components/Statistics.tsx","App.tsx","index.tsx"],"names":["boardState","createTagged","getBombNearCount","board","targetCell","offsetY","res","offsetX","row","col","isBomb","openCell","boardCopy","currentCell","cell","itemsToOpen","length","pop","isOpened","isFlag","bombCount","cells","indexOf","push","copyBoard","endTimeState","gameOverState","openBombs","rowsCount","colsCount","win","Date","now","flagBombs","lose","open","getOpenNearStatus","flagsCount","isUnflagBombNear","openNearCells","openNear","flagCell","flags","flag","getRandomPoint","width","height","Math","floor","random","generateBoardState","excludeRow","excludeCol","minesCount","widthState","heightState","bombCountState","startTimeState","start","CELL_SIZE","HALF_CELL_SIZE","BOARD_ID","CELL_COLOR","1","2","3","4","5","6","7","8","getEventPoint","event","rect","document","getElementById","getBoundingClientRect","clientY","top","clientX","left","renderCell","ctx","x","y","fillStyle","fillRect","font","textAlign","textBaseline","fillText","renderBoard","rows","cols","renderEmptyBoard","Board","useTagged","gameOver","boardBoard","boardWidth","boardHeight","useLayoutEffect","getContext","id","style","userSelect","cursor","pointerEvents","undefined","data-is-over","onClick","onDoubleClick","onContextMenu","preventDefault","minMax","min","value","max","WidthInput","defaultValue","type","onBlur","target","HeightInput","BombCountInput","StyledSettings","styled","div","Settings","Timer","useReducer","s","forceUpdate","startTime","endTime","useEffect","intervalId","setInterval","clearInterval","clear","ClearButton","FlagCount","StyledStatistics","Statistics","StyledApp","main","Content","section","App","render"],"mappings":"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","file":"static/js/main.244d9efc.chunk.js","sourcesContent":["import { createTagged } from 'react-tagged-state';\n\nexport interface Cell {\n    row: number;\n    col: number;\n    bombCount: number | null;\n    isBomb: boolean;\n    isFlag: boolean;\n    isOpened: boolean;\n}\n\nexport interface BoardState {\n    board: Array<Array<Cell>>;\n    flags: number;\n    cells: number;\n}\n\nconst boardState = createTagged<BoardState | null>(null);\n\nexport default boardState;\n","import { BoardState, Cell } from '../states/boardState';\n\nconst getBombNearCount = (board: BoardState, targetCell: Cell): number | null => {\n    let res = 0;\n    let offsetX = -1;\n    let offsetY;\n    let cell;\n\n    for (; offsetX <= 1; ++offsetX) {\n        for (offsetY = -1; offsetY <= 1; ++offsetY) {\n            cell = board.board[offsetY + targetCell.row]?.[offsetX + targetCell.col];\n\n            if (cell?.isBomb) {\n                ++res;\n            }\n        }\n    }\n\n    return res || null;\n};\n\nexport default getBombNearCount;\n","import { BoardState, Cell } from '../states/boardState';\nimport getBombNearCount from './getBombNearCount';\n\nconst openCell = (boardCopy: BoardState, targetCell: Cell): BoardState => {\n    const itemsToOpen = [targetCell];\n    let currentCell;\n    let cell;\n    let offsetX;\n    let offsetY;\n\n    while (itemsToOpen.length) {\n        currentCell = itemsToOpen.pop();\n\n        if (!currentCell || currentCell.isOpened || currentCell.isFlag) {\n            continue;\n        }\n\n        currentCell.isOpened = true;\n        currentCell.bombCount = getBombNearCount(boardCopy, currentCell);\n        boardCopy.cells -= 1;\n\n        if (currentCell.bombCount) {\n            continue;\n        }\n\n        for (offsetX = -1; offsetX <= 1; ++offsetX) {\n            for (offsetY = -1; offsetY <= 1; ++offsetY) {\n                cell = boardCopy.board[offsetY + currentCell.row]?.[offsetX + currentCell.col];\n\n                if (cell && itemsToOpen.indexOf(cell) === -1 && !cell.isOpened && !cell.isFlag) {\n                    itemsToOpen.push(cell);\n                }\n            }\n        }\n    }\n\n    return boardCopy;\n};\n\nexport default openCell;\n","import { BoardState } from '../states/boardState';\n\nconst copyBoard = (board: BoardState): BoardState => ({\n    ...board,\n    board: [...board.board]\n});\n\nexport default copyBoard;\n","import { createTagged } from 'react-tagged-state';\n\nconst endTimeState = createTagged<number | null>(null);\n\nexport default endTimeState;\n","import { createTagged } from 'react-tagged-state';\n\nexport type GameOver = 'win' | 'lose' | null;\n\nconst gameOverState = createTagged<GameOver>(null);\n\nexport default gameOverState;\n","import { BoardState } from '../states/boardState';\n\nconst openBombs = (boardCopy: BoardState): BoardState => {\n    let row = 0;\n    let col;\n    const rowsCount = boardCopy.board.length;\n    const colsCount = boardCopy.board[0].length;\n\n    for (; row < rowsCount; ++row) {\n        for (col = 0; col < colsCount; col++) {\n            if (boardCopy.board[row][col].isBomb) {\n                boardCopy.board[row][col].isFlag = true;\n            }\n        }\n    }\n\n    return boardCopy;\n};\n\nexport default openBombs;\n","import endTimeState from '../states/endTime';\nimport gameOverState from '../states/gameOverState';\nimport boardState from '../states/boardState';\nimport flagBombs from '../utils/flagBombs';\nimport copyBoard from '../utils/copyBoard';\n\nconst win = (): void => {\n    endTimeState(Date.now());\n    gameOverState('win');\n    boardState((board) => board && flagBombs(copyBoard(board)));\n};\n\nexport default win;\n","import { BoardState } from '../states/boardState';\n\nconst openBombs = (boardCopy: BoardState): BoardState => {\n    let row = 0;\n    let col;\n    const rowsCount = boardCopy.board.length;\n    const colsCount = boardCopy.board[0].length;\n\n    for (; row < rowsCount; ++row) {\n        for (col = 0; col < colsCount; col++) {\n            if (boardCopy.board[row][col].isBomb) {\n                boardCopy.board[row][col].isOpened = true;\n            }\n        }\n    }\n\n    return boardCopy;\n};\n\nexport default openBombs;\n","import endTimeState from '../states/endTime';\nimport gameOverState from '../states/gameOverState';\nimport boardState from '../states/boardState';\nimport openBombs from '../utils/openBombs';\nimport copyBoard from '../utils/copyBoard';\n\nconst lose = (): void => {\n    endTimeState(Date.now());\n    gameOverState('lose');\n    boardState((board) => board && openBombs(copyBoard(board)));\n};\n\nexport default lose;\n","import boardState, { Cell } from '../states/boardState';\nimport openCell from '../utils/openCell';\nimport copyBoard from '../utils/copyBoard';\nimport win from './win';\nimport lose from './lose';\n\nconst open = (cell?: Cell): void => {\n    if (!cell || cell.isOpened || cell.isFlag) {\n        return;\n    }\n\n    if (cell.isBomb) {\n        lose();\n\n        return;\n    }\n\n    boardState((board) => board && openCell(copyBoard(board), cell));\n\n    if (boardState()?.cells === 0) {\n        win();\n    }\n};\n\nexport default open;\n","import { BoardState, Cell } from '../states/boardState';\n\nconst getOpenNearStatus = (board: BoardState | null, targetCell: Cell): -1 | 1 | 0 => {\n    if (!board) {\n        return 0;\n    }\n\n    let flagsCount = 0;\n    let isUnflagBombNear = false;\n    let offsetX = -1;\n    let offsetY;\n    let cell;\n\n    for (; offsetX <= 1; ++offsetX) {\n        for (offsetY = -1; offsetY <= 1; ++offsetY) {\n            cell = board.board[offsetY + targetCell.row]?.[offsetX + targetCell.col];\n\n            if (cell?.isFlag) {\n                flagsCount++;\n\n                continue;\n            }\n\n            if (cell?.isBomb) {\n                isUnflagBombNear = true;\n            }\n        }\n    }\n\n    return flagsCount === targetCell.bombCount ? (isUnflagBombNear ? -1 : 1) : 0;\n};\n\nexport default getOpenNearStatus;\n","import { BoardState, Cell } from '../states/boardState';\nimport openCell from './openCell';\n\nconst openNearCells = (boardCopy: BoardState, targetCell: Cell): BoardState => {\n    let offsetX = -1;\n    let offsetY;\n\n    for (; offsetX <= 1; ++offsetX) {\n        for (offsetY = -1; offsetY <= 1; ++offsetY) {\n            openCell(boardCopy, boardCopy.board[offsetY + targetCell.row]?.[offsetX + targetCell.col]);\n        }\n    }\n\n    return boardCopy;\n};\n\nexport default openNearCells;\n","import getOpenNearStatus from '../utils/getOpenNearStatus';\nimport boardState, { Cell } from '../states/boardState';\nimport openNearCells from '../utils/openNearCells';\nimport copyBoard from '../utils/copyBoard';\nimport win from './win';\nimport lose from './lose';\n\nconst openNear = (cell: Cell): void => {\n    switch (getOpenNearStatus(boardState(), cell)) {\n        case -1: {\n            lose();\n\n            return;\n        }\n        case 1: {\n            boardState((board) => board && openNearCells(copyBoard(board), cell));\n\n            if (boardState()?.cells === 0) {\n                win();\n            }\n        }\n    }\n};\n\nexport default openNear;\n","import { BoardState, Cell } from '../states/boardState';\n\nconst flagCell = (boardCopy: BoardState, cell: Cell): BoardState => {\n    const isFlag = cell.isFlag;\n\n    boardCopy.board[cell.row][cell.col].isFlag = !isFlag;\n    boardCopy.flags += isFlag ? 1 : -1;\n\n    return boardCopy;\n};\n\nexport default flagCell;\n","import boardState, { Cell } from '../states/boardState';\nimport flagCell from '../utils/flagCell';\nimport copyBoard from '../utils/copyBoard';\n\nconst flag = (cell: Cell): void => {\n    if (!cell.isOpened && (cell.isFlag || (boardState()?.flags || 0) > 0)) {\n        boardState((board) => board && flagCell(copyBoard(board), cell));\n    }\n};\n\nexport default flag;\n","const getRandomPoint = (width: number, height: number): [number, number] => [\n    Math.floor(Math.random() * height),\n    Math.floor(Math.random() * width)\n];\n\nexport default getRandomPoint;\n","import { BoardState } from '../states/boardState';\nimport getRandomPoint from './getRandomPoint';\n\nconst generateBoardState = (\n    width: number,\n    height: number,\n    bombCount: number,\n    excludeRow?: number,\n    excludeCol?: number\n): BoardState => {\n    const board: BoardState['board'] = [];\n    let minesCount = 0;\n    let row = 0;\n    let col;\n\n    for (; row < height; ++row) {\n        board[row] = [];\n\n        for (col = 0; col < width; ++col) {\n            board[row][col] = {\n                row,\n                col,\n                bombCount: null,\n                isBomb: false,\n                isFlag: false,\n                isOpened: false\n            };\n        }\n    }\n\n    while (minesCount < bombCount) {\n        [row, col] = getRandomPoint(width, height);\n\n        if (!board[row][col].isBomb && (row !== excludeRow || excludeCol !== col)) {\n            board[row][col].isBomb = true;\n            ++minesCount;\n        }\n    }\n\n    return {\n        board,\n        flags: bombCount,\n        cells: width * height - bombCount\n    };\n};\n\nexport default generateBoardState;\n","import { createTagged } from 'react-tagged-state';\n\nconst widthState = createTagged<number>(30);\n\nexport default widthState;\n","import { createTagged } from 'react-tagged-state';\n\nconst heightState = createTagged<number>(16);\n\nexport default heightState;\n","import { createTagged } from 'react-tagged-state';\n\nconst bombCountState = createTagged<number>(99);\n\nexport default bombCountState;\n","import { createTagged } from 'react-tagged-state';\n\nconst startTimeState = createTagged<number | null>(null);\n\nexport default startTimeState;\n","import boardState from '../states/boardState';\nimport generateBoardState from '../utils/generateBoardState';\nimport widthState from '../states/widthState';\nimport heightState from '../states/heightState';\nimport bombCountState from '../states/bombCountState';\nimport startTimeState from '../states/startTime';\nimport open from './open';\n\nconst start = (row: number, col: number): void => {\n    boardState(generateBoardState(widthState(), heightState(), bombCountState(), row, col));\n    startTimeState(Date.now());\n\n    open(boardState()?.board[row][col]);\n};\n\nexport default start;\n","import { ReactElement, useLayoutEffect, MouseEvent } from 'react';\nimport { useTagged } from 'react-tagged-state';\nimport open from '../actions/open';\nimport openNear from '../actions/openNear';\nimport flag from '../actions/flag';\nimport start from '../actions/start';\nimport boardState, { BoardState, Cell } from '../states/boardState';\nimport gameOverState, { GameOver } from '../states/gameOverState';\nimport widthState from '../states/widthState';\nimport heightState from '../states/heightState';\nimport generateBoardState from '../utils/generateBoardState';\n\nconst CELL_SIZE = 20;\n\nconst HALF_CELL_SIZE = CELL_SIZE / 2;\n\nconst BOARD_ID = 'BOARD_ID';\n\nconst CELL_COLOR: Record<number, string> = {\n    1: 'blue',\n    2: 'green',\n    3: 'red',\n    4: 'purple',\n    5: 'maroon',\n    6: 'turquoise',\n    7: 'black',\n    8: 'gray'\n};\n\nconst getEventPoint = (event: MouseEvent) => {\n    const rect = document.getElementById(BOARD_ID)?.getBoundingClientRect();\n\n    if (!rect) {\n        return [0, 0];\n    }\n\n    return [Math.floor((event.clientY - rect.top) / CELL_SIZE), Math.floor((event.clientX - rect.left) / CELL_SIZE)];\n};\n\nconst renderEmptyBoard = (ctx: CanvasRenderingContext2D, { rows, cols }: { rows: number; cols: number }) => {\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0, 0, cols * CELL_SIZE, rows * CELL_SIZE);\n};\n\nconst renderCell = (ctx: CanvasRenderingContext2D, { cell }: { cell: Cell }) => {\n    const x = cell.col * CELL_SIZE;\n    const y = cell.row * CELL_SIZE;\n\n    ctx.fillStyle = cell.isOpened ? 'aliceblue' : 'lightgray';\n    ctx.fillRect(x, y, CELL_SIZE - 1, CELL_SIZE - 1);\n    ctx.font =\n        \"12px -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif\";\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    if (!cell.isOpened) {\n        if (cell.isFlag) {\n            ctx.fillText('🚩', x + HALF_CELL_SIZE - 1, y + HALF_CELL_SIZE);\n\n            return;\n        }\n\n        return;\n    }\n\n    if (cell.isBomb) {\n        if (cell.isFlag) {\n            ctx.fillText('✅', x + HALF_CELL_SIZE - 1, y + HALF_CELL_SIZE);\n\n            return;\n        }\n\n        ctx.fillText('💣', x + HALF_CELL_SIZE - 1, y + HALF_CELL_SIZE);\n\n        return;\n    }\n\n    if (!cell.bombCount) {\n        return;\n    }\n\n    if (CELL_COLOR[cell.bombCount]) {\n        ctx.fillStyle = CELL_COLOR[cell.bombCount];\n    }\n\n    ctx.fillText(`${cell.bombCount}`, x + HALF_CELL_SIZE - 1, y + HALF_CELL_SIZE);\n};\n\nconst renderBoard = (ctx: CanvasRenderingContext2D, { board }: { board: BoardState['board'] }) => {\n    let row = 0;\n    let col = 0;\n    const rows = board.length;\n    const cols = board[0].length;\n\n    renderEmptyBoard(ctx, { rows, cols });\n\n    for (; row < rows; ++row) {\n        for (col = 0; col < cols; ++col) {\n            renderCell(ctx, { cell: board[row][col] });\n        }\n    }\n};\n\nconst Board = (): ReactElement => {\n    const board = useTagged(boardState);\n    const gameOver = useTagged<GameOver>(gameOverState);\n    const width = useTagged<number>(widthState);\n    const height = useTagged<number>(heightState);\n    const boardBoard = board ? board.board : generateBoardState(width, height, 0).board;\n    const boardWidth = boardBoard[0].length * CELL_SIZE;\n    const boardHeight = boardBoard.length * CELL_SIZE;\n\n    useLayoutEffect(() => {\n        const ctx = (document.getElementById(BOARD_ID) as HTMLCanvasElement).getContext('2d');\n\n        if (ctx) {\n            renderBoard(ctx, { board: boardBoard });\n        }\n    }, [boardBoard]);\n\n    return (\n        <canvas\n            id={BOARD_ID}\n            style={{\n                width: boardWidth,\n                height: boardHeight,\n                userSelect: 'none',\n                cursor: 'pointer',\n                pointerEvents: gameOver ? 'none' : undefined\n            }}\n            data-is-over={!!gameOver}\n            width={boardWidth}\n            height={boardHeight}\n            onClick={(event) => {\n                const [row, col] = getEventPoint(event);\n\n                if (board) {\n                    open(boardBoard[row][col]);\n\n                    return;\n                }\n\n                start(row, col);\n            }}\n            onDoubleClick={\n                board\n                    ? (event: MouseEvent) => {\n                          const [row, col] = getEventPoint(event);\n\n                          openNear(boardBoard[row][col]);\n                      }\n                    : undefined\n            }\n            onContextMenu={\n                board\n                    ? (event: MouseEvent) => {\n                          event.preventDefault();\n\n                          const [row, col] = getEventPoint(event);\n\n                          flag(boardBoard[row][col]);\n                      }\n                    : undefined\n            }\n        />\n    );\n};\n\nexport default Board;\n","const minMax = (min: number, value: number, max: number): number => Math.max(Math.min(value, max), min);\n\nexport default minMax;\n","import { useTagged } from 'react-tagged-state';\nimport { ReactElement } from 'react';\nimport widthState from '../states/widthState';\nimport minMax from '../utils/minMax';\n\nconst WidthInput = (): ReactElement => {\n    const width = useTagged(widthState);\n\n    return (\n        <label>\n            Width:\n            <input\n                key={width}\n                defaultValue={width}\n                type=\"number\"\n                onBlur={(event: { target: HTMLInputElement }) => widthState(minMax(8, +(event.target.value || 0), 99))}\n                min={8}\n                max={99}\n            />\n        </label>\n    );\n};\n\nexport default WidthInput;\n","import { useTagged } from 'react-tagged-state';\nimport { ReactElement } from 'react';\nimport heightState from '../states/heightState';\nimport minMax from '../utils/minMax';\n\nconst HeightInput = (): ReactElement => {\n    const height = useTagged(heightState);\n\n    return (\n        <label>\n            Height:\n            <input\n                key={height}\n                defaultValue={height}\n                type=\"number\"\n                onBlur={(event: { target: HTMLInputElement }) => heightState(minMax(1, +(event.target.value || 0), 99))}\n                min={8}\n                max={99}\n            />\n        </label>\n    );\n};\n\nexport default HeightInput;\n","import { useTagged } from 'react-tagged-state';\nimport { ReactElement } from 'react';\nimport bombCountState from '../states/bombCountState';\nimport widthState from '../states/widthState';\nimport heightState from '../states/heightState';\nimport minMax from '../utils/minMax';\n\nconst BombCountInput = (): ReactElement => {\n    const bombCount = useTagged(bombCountState);\n\n    return (\n        <label>\n            Bomb count:\n            <input\n                key={bombCount}\n                defaultValue={bombCount}\n                type=\"number\"\n                onBlur={(event: { target: HTMLInputElement }) =>\n                    bombCountState(minMax(0, +(event.target.value || 0), widthState() * heightState() - 1))\n                }\n                min={0}\n                max={9800}\n            />\n        </label>\n    );\n};\n\nexport default BombCountInput;\n","import styled from 'styled-components';\nimport { ReactElement } from 'react';\nimport WidthInput from './WidthInput';\nimport HeightInput from './HeightInput';\nimport BombCountInput from './BombCountInput';\n\nconst StyledSettings = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 10px;\n`;\n\nconst Settings = (): ReactElement => (\n    <StyledSettings>\n        <WidthInput />\n        <HeightInput />\n        <BombCountInput />\n    </StyledSettings>\n);\n\nexport default Settings;\n","import { ReactElement, useEffect, useReducer } from 'react';\nimport { useTagged } from 'react-tagged-state';\nimport endTimeState from '../states/endTime';\nimport startTimeState from '../states/startTime';\n\nconst Timer = (): ReactElement => {\n    const [, forceUpdate] = useReducer((s) => s + 1, 0);\n    const startTime = useTagged(startTimeState);\n    const endTime = useTagged(endTimeState);\n\n    useEffect(() => {\n        let intervalId: any;\n\n        if (!endTime && !!startTime) {\n            intervalId = setInterval(() => {\n                forceUpdate();\n            }, 1000);\n        }\n\n        return () => {\n            clearInterval(intervalId);\n        };\n    }, [startTime, endTime]);\n\n    return <span>Time:{startTime ? Math.floor(((endTime || Date.now()) - startTime) / 1000) : 0}</span>;\n};\n\nexport default Timer;\n","import boardState from '../states/boardState';\nimport startTimeState from '../states/startTime';\nimport endTimeState from '../states/endTime';\nimport gameOverState from '../states/gameOverState';\n\nconst clear = (): void => {\n    boardState(null);\n    startTimeState(null);\n    endTimeState(null);\n    gameOverState(null);\n};\n\nexport default clear;\n","import { useTagged } from 'react-tagged-state';\nimport { ReactElement } from 'react';\nimport gameOverState from '../states/gameOverState';\nimport clear from '../actions/clear';\n\nconst ClearButton = (): ReactElement => {\n    const gameOver = useTagged(gameOverState);\n\n    return <button onClick={clear}>{gameOver === 'win' ? '😎' : gameOver === 'lose' ? '😵' : '😊'}</button>;\n};\n\nexport default ClearButton;\n","import { useTagged } from 'react-tagged-state';\nimport { ReactElement } from 'react';\nimport bombCountState from '../states/bombCountState';\nimport boardState, { BoardState } from '../states/boardState';\n\nconst FlagCount = (): ReactElement => {\n    const bombCount = useTagged(bombCountState);\n    const flags = useTagged(boardState<BoardState['flags']>`flags`);\n\n    return <span>Flags:{typeof flags === 'number' ? flags : bombCount}</span>;\n};\n\nexport default FlagCount;\n","import styled from 'styled-components';\nimport { ReactElement } from 'react';\nimport Timer from './Timer';\nimport ClearButton from './ClearButton';\nimport FlagCount from './FlagCount';\n\nconst StyledStatistics = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 10px;\n`;\n\nconst Statistics = (): ReactElement => (\n    <StyledStatistics>\n        <FlagCount />\n        <ClearButton />\n        <Timer />\n    </StyledStatistics>\n);\n\nexport default Statistics;\n","import styled from 'styled-components';\nimport { ReactElement } from 'react';\nimport Board from './components/Board';\nimport Settings from './components/Settings';\nimport Statistics from './components/Statistics';\n\nconst StyledApp = styled.main`\n    display: flex;\n    flex-direction: column;\n    margin: auto;\n    height: calc(100vh - 20px);\n    padding-top: 20px;\n    width: calc(100vw - 40px);\n    align-items: center;\n`;\n\nconst Content = styled.section`\n    display: flex;\n    overflow: auto;\n    max-width: 100%;\n    border-top: 1px solid black;\n    border-left: 1px solid black;\n`;\n\nconst App = (): ReactElement => (\n    <StyledApp>\n        <Settings />\n        <Statistics />\n        <Content>\n            <Board />\n        </Content>\n    </StyledApp>\n);\n\nexport default App;\n","import { StrictMode } from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nrender(\n    <StrictMode>\n        <App />\n    </StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}