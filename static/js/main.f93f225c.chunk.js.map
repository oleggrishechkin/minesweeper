{"version":3,"sources":["components/Statistics/Statistics.module.css","App.module.css","states/boardState.ts","states/gameOverState.ts","hooks/useVirtualGrid.ts","states/startTimeState.ts","states/cellsState.ts","selectors/getBombNearCount.ts","actions/openCell.ts","states/flagsState.ts","states/widthState.ts","states/bombCountState.ts","states/heightState.ts","actions/initBoard.ts","states/endTimeState.ts","actions/openBombs.ts","actions/lose.ts","actions/flagBombs.ts","actions/win.ts","actions/open.ts","selectors/getOpenNearStatus.ts","actions/openNearCells.ts","actions/openNear.ts","actions/flagCell.ts","actions/flag.ts","components/constants.ts","components/Cell/Cell.tsx","actions/init.ts","hooks/useGenerateBoard.ts","components/Board/Board.tsx","components/WidthInput.tsx","components/HeightInput.tsx","components/BombCountInput.tsx","components/Settings/Settings.tsx","components/Timer.tsx","components/InitButton.tsx","components/FlagCount.tsx","components/Statistics/Statistics.tsx","App.tsx","index.tsx","components/Board/Board.module.css","components/Cell/Cell.module.css","components/Settings/Settings.module.css"],"names":["module","exports","boardState","createSignal","gameOverState","useVirtualGrid","width","height","overscan","parentRef","useRef","useState","fromRow","toRow","fromCol","toCol","state","setState","useEffect","frameId","frame","current","rect","getBoundingClientRect","nextFromRow","Math","max","floor","scrollTop","nextToRow","ceil","nextFromCol","scrollLeft","nextToCol","currentState","requestAnimationFrame","cancelAnimationFrame","startTimeState","cellsState","getBombNearCount","targetCell","board","res","offsetX","offsetY","row","col","isBomb","openCell","isOpened","isFlag","itemsToOpen","Set","forEach","currentCell","bombCount","mutated","cells","cell","add","flagsState","widthState","bombCountState","heightState","initBoard","excludeRow","excludeCol","minesCount","possibleBombPoints","push","id","splice","random","length","point","endTimeState","openBombs","rowsCount","colsCount","lose","Date","now","flagBombs","win","open","getOpenNearStatus","flagsCount","isUnflagBombNear","openNearCells","openNear","flagCell","flags","flag","CELL_SIZE","CELL_COLOR","1","2","3","4","5","6","7","8","getCellContent","Cell","useTagged","className","styles","style","top","left","background","color","borderTop","borderLeft","onClick","onDoubleClick","onContextMenu","event","preventDefault","init","useGenerateBoard","createEffect","Board","gameOver","renderedCells","rows","ref","innerBoard","pointerEvents","WidthInput","defaultValue","type","onBlur","target","value","min","HeightInput","BombCountInput","Settings","settings","Timer","useReducer","s","forceUpdate","startTime","endTime","intervalId","setInterval","clearInterval","InitButton","FlagCount","Statistics","statistics","App","app","render","document","getElementById"],"mappings":"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","file":"static/js/main.f93f225c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics\":\"Statistics_statistics__2QFok\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\"};","import { createSignal } from 'react-tagged-state';\n\nexport interface Cell {\n    id: string;\n    row: number;\n    col: number;\n    bombCount: number;\n    isBomb: boolean;\n    isFlag: boolean;\n    isOpened: boolean;\n}\n\nconst boardState = createSignal<Array<Array<Cell>> | null>(null);\n\nexport default boardState;\n","import { createSignal } from 'react-tagged-state';\n\nexport type GameOver = 'win' | 'lose' | null;\n\nconst gameOverState = createSignal<GameOver>(null);\n\nexport default gameOverState;\n","import { useEffect, useRef, useState } from 'react';\n\nconst useVirtualGrid = ({ width, height, overscan = 0 }: { width: number; height: number; overscan?: number }) => {\n    const parentRef = useRef<HTMLElement | null>(null);\n    const [state, setState] = useState(() => ({\n        fromRow: 0,\n        toRow: 0,\n        fromCol: 0,\n        toCol: 0\n    }));\n\n    useEffect(() => {\n        let frameId: any;\n        const frame = () => {\n            if (parentRef.current) {\n                const rect = parentRef.current.getBoundingClientRect();\n                const nextFromRow = Math.max(Math.floor(parentRef.current.scrollTop / height) - overscan, 0);\n                const nextToRow = Math.max(\n                    (Math.ceil(parentRef.current.scrollTop + rect.height) + overscan) / height,\n                    0\n                );\n                const nextFromCol = Math.max(Math.floor(parentRef.current.scrollLeft / width) - overscan, 0);\n                const nextToCol = Math.max(\n                    (Math.ceil(parentRef.current.scrollLeft + rect.width) + overscan) / width,\n                    0\n                );\n\n                setState((currentState) => {\n                    if (\n                        currentState.fromRow === nextFromRow &&\n                        currentState.toRow === nextToRow &&\n                        currentState.fromCol === nextFromCol &&\n                        currentState.toCol === nextToCol\n                    ) {\n                        return currentState;\n                    }\n\n                    return {\n                        fromRow: nextFromRow,\n                        toRow: nextToRow,\n                        fromCol: nextFromCol,\n                        toCol: nextToCol\n                    };\n                });\n            }\n            frameId = requestAnimationFrame(frame);\n        };\n\n        frame();\n\n        return () => {\n            cancelAnimationFrame(frameId);\n        };\n    }, [height, width]);\n\n    return [parentRef, state] as const;\n};\n\nexport default useVirtualGrid;\n","import { createSignal } from 'react-tagged-state';\n\nconst startTimeState = createSignal<number | null>(null);\n\nexport default startTimeState;\n","import { createSignal } from 'react-tagged-state';\n\nconst cellsState = createSignal(0);\n\nexport default cellsState;\n","import boardState, { Cell } from '../states/boardState';\n\nconst getBombNearCount = (targetCell: Cell) => {\n    const board = boardState();\n    let res = 0;\n\n    for (let offsetX = -1; offsetX <= 1; offsetX++) {\n        for (let offsetY = -1; offsetY <= 1; offsetY++) {\n            if (board?.[offsetY + targetCell.row]?.[offsetX + targetCell.col]?.isBomb) {\n                res++;\n            }\n        }\n    }\n\n    return res;\n};\n\nexport default getBombNearCount;\n","import { mutated } from 'react-tagged-state';\nimport boardState, { Cell } from '../states/boardState';\nimport cellsState from '../states/cellsState';\nimport getBombNearCount from '../selectors/getBombNearCount';\n\nconst openCell = (targetCell?: Cell) => {\n    const board = boardState();\n\n    if (!board || !targetCell || targetCell.isOpened || targetCell.isFlag) {\n        return;\n    }\n\n    const itemsToOpen = new Set([targetCell]);\n\n    itemsToOpen.forEach((currentCell) => {\n        currentCell.isOpened = true;\n        currentCell.bombCount = getBombNearCount(currentCell);\n        mutated(currentCell);\n        cellsState((cells) => cells - 1);\n\n        if (currentCell.bombCount) {\n            return;\n        }\n\n        for (let offsetX = -1; offsetX <= 1; ++offsetX) {\n            for (let offsetY = -1; offsetY <= 1; ++offsetY) {\n                const cell = board[offsetY + currentCell.row]?.[offsetX + currentCell.col];\n\n                if (cell && !cell.isOpened && !cell.isFlag) {\n                    itemsToOpen.add(cell);\n                }\n            }\n        }\n    });\n};\n\nexport default openCell;\n","import { createSignal } from 'react-tagged-state';\n\nconst flagsState = createSignal(0);\n\nexport default flagsState;\n","import { createSignal } from 'react-tagged-state';\n\nconst widthState = createSignal(30);\n\nexport default widthState;\n","import { createSignal } from 'react-tagged-state';\n\nconst bombCountState = createSignal(99);\n\nexport default bombCountState;\n","import { createSignal } from 'react-tagged-state';\n\nconst heightState = createSignal(16);\n\nexport default heightState;\n","import boardState, { Cell } from '../states/boardState';\nimport flagsState from '../states/flagsState';\nimport cellsState from '../states/cellsState';\nimport widthState from '../states/widthState';\nimport bombCountState from '../states/bombCountState';\nimport heightState from '../states/heightState';\n\nconst initBoard = (excludeRow?: number, excludeCol?: number) => {\n    const width = widthState();\n    const height = heightState();\n    const bombCount = bombCountState();\n    const board: Array<Array<Cell>> = [];\n    let minesCount = 0;\n    let row = 0;\n    let col;\n    const possibleBombPoints = [];\n\n    for (; row < height; ++row) {\n        board[row] = [];\n\n        for (col = 0; col < width; ++col) {\n            if (row !== excludeRow || excludeCol !== col) {\n                possibleBombPoints.push([row, col]);\n            }\n\n            board[row][col] = {\n                id: `[${row}][${col}]`,\n                row,\n                col,\n                bombCount: 0,\n                isBomb: false,\n                isFlag: false,\n                isOpened: false\n            };\n        }\n    }\n\n    while (minesCount < bombCount) {\n        const [point] = possibleBombPoints.splice(Math.floor(Math.random() * possibleBombPoints.length), 1);\n\n        board[point[0]][point[1]].isBomb = true;\n        ++minesCount;\n    }\n\n    boardState(board);\n    flagsState(bombCount);\n    cellsState(width * height - bombCount);\n};\n\nexport default initBoard;\n","import { createSignal } from 'react-tagged-state';\n\nconst endTimeState = createSignal<number | null>(null);\n\nexport default endTimeState;\n","import { mutated } from 'react-tagged-state';\nimport boardState from '../states/boardState';\n\nconst openBombs = () => {\n    const board = boardState();\n\n    if (!board) {\n        return;\n    }\n\n    const rowsCount = board.length;\n    const colsCount = board[0].length;\n\n    for (let row = 0; row < rowsCount; row++) {\n        for (let col = 0; col < colsCount; col++) {\n            const cell = board[row][col];\n            if (cell.isBomb) {\n                cell.isOpened = true;\n                mutated(cell);\n            }\n        }\n    }\n};\n\nexport default openBombs;\n","import endTimeState from '../states/endTimeState';\nimport gameOverState from '../states/gameOverState';\nimport startTimeState from '../states/startTimeState';\nimport openBombs from './openBombs';\n\nconst lose = () => {\n    if (!startTimeState()) {\n        return;\n    }\n\n    endTimeState(Date.now());\n    gameOverState('lose');\n    openBombs();\n};\n\nexport default lose;\n","import { mutated } from 'react-tagged-state';\nimport boardState from '../states/boardState';\n\nconst flagBombs = () => {\n    const board = boardState();\n\n    if (!board) {\n        return;\n    }\n\n    const rowsCount = board.length;\n    const colsCount = board[0].length;\n\n    for (let row = 0; row < rowsCount; row++) {\n        for (let col = 0; col < colsCount; col++) {\n            const cell = board[row][col];\n            if (cell.isBomb) {\n                cell.isFlag = true;\n                mutated(cell);\n            }\n        }\n    }\n};\n\nexport default flagBombs;\n","import endTimeState from '../states/endTimeState';\nimport gameOverState from '../states/gameOverState';\nimport startTimeState from '../states/startTimeState';\nimport flagBombs from './flagBombs';\n\nconst win = () => {\n    if (!startTimeState()) {\n        return;\n    }\n\n    endTimeState(Date.now());\n    gameOverState('win');\n    flagBombs();\n};\n\nexport default win;\n","import boardState, { Cell } from '../states/boardState';\nimport startTimeState from '../states/startTimeState';\nimport cellsState from '../states/cellsState';\nimport openCell from './openCell';\nimport initBoard from './initBoard';\nimport lose from './lose';\nimport win from './win';\n\nconst open = (cell: Cell) => {\n    const startTime = startTimeState();\n\n    if (!startTime) {\n        if (cell.isBomb) {\n            initBoard(cell.row, cell.col);\n\n            cell = boardState()![cell.row][cell.col];\n        }\n\n        startTimeState(Date.now());\n    }\n\n    if (cell.isOpened || cell.isFlag) {\n        return;\n    }\n\n    if (cell.isBomb) {\n        lose();\n\n        return;\n    }\n\n    openCell(cell);\n\n    if (cellsState() === 0) {\n        win();\n    }\n};\n\nexport default open;\n","import boardState, { Cell } from '../states/boardState';\n\nconst getOpenNearStatus = (targetCell: Cell): -1 | 1 | 0 => {\n    const board = boardState();\n\n    if (!board) {\n        return 0;\n    }\n\n    let flagsCount = 0;\n    let isUnflagBombNear = false;\n\n    for (let offsetX = -1; offsetX <= 1; offsetX++) {\n        for (let offsetY = -1; offsetY <= 1; offsetY++) {\n            const cell = board[offsetY + targetCell.row]?.[offsetX + targetCell.col];\n\n            if (cell?.isFlag) {\n                flagsCount++;\n\n                continue;\n            }\n\n            if (cell?.isBomb) {\n                isUnflagBombNear = true;\n            }\n        }\n    }\n\n    return flagsCount === targetCell.bombCount ? (isUnflagBombNear ? -1 : 1) : 0;\n};\n\nexport default getOpenNearStatus;\n","import boardState, { Cell } from '../states/boardState';\nimport openCell from './openCell';\n\nconst openNearCells = (targetCell: Cell) => {\n    const board = boardState();\n\n    if (!board) {\n        return;\n    }\n\n    for (let offsetX = -1; offsetX <= 1; offsetX++) {\n        for (let offsetY = -1; offsetY <= 1; offsetY++) {\n            openCell(board[offsetY + targetCell.row]?.[offsetX + targetCell.col]);\n        }\n    }\n};\n\nexport default openNearCells;\n","import { Cell } from '../states/boardState';\nimport startTimeState from '../states/startTimeState';\nimport cellsState from '../states/cellsState';\nimport getOpenNearStatus from '../selectors/getOpenNearStatus';\nimport openNearCells from './openNearCells';\nimport win from './win';\nimport lose from './lose';\n\nconst openNear = (cell: Cell) => {\n    if (!startTimeState()) {\n        return;\n    }\n\n    switch (getOpenNearStatus(cell)) {\n        case -1: {\n            lose();\n\n            return;\n        }\n        case 1: {\n            openNearCells(cell);\n\n            if (cellsState() === 0) {\n                win();\n            }\n        }\n    }\n};\n\nexport default openNear;\n","import { mutated } from 'react-tagged-state';\nimport { Cell } from '../states/boardState';\nimport flagsState from '../states/flagsState';\n\nconst flagCell = (cell: Cell) => {\n    const isFlag = cell.isFlag;\n\n    cell.isFlag = !isFlag;\n    mutated(cell);\n    flagsState((flags) => flags + (isFlag ? 1 : -1));\n};\n\nexport default flagCell;\n","import { Cell } from '../states/boardState';\nimport startTimeState from '../states/startTimeState';\nimport flagsState from '../states/flagsState';\nimport flagCell from './flagCell';\n\nconst flag = (cell: Cell) => {\n    if (!startTimeState()) {\n        return;\n    }\n\n    if (!cell.isOpened && (cell.isFlag || flagsState() > 0)) {\n        flagCell(cell);\n    }\n};\n\nexport default flag;\n","export const CELL_SIZE = 20;\n\nexport const CELL_COLOR: Record<number, string> = {\n    1: 'blue',\n    2: 'green',\n    3: 'red',\n    4: 'purple',\n    5: 'maroon',\n    6: 'turquoise',\n    7: 'black',\n    8: 'gray'\n};\n","import { MouseEvent, ReactElement } from 'react';\nimport { useTagged } from 'react-tagged-state';\nimport { Cell as CellInterface } from '../../states/boardState';\nimport open from '../../actions/open';\nimport openNear from '../../actions/openNear';\nimport flag from '../../actions/flag';\nimport { CELL_COLOR, CELL_SIZE } from '../constants';\nimport styles from './Cell.module.css';\n\nconst getCellContent = (cell: CellInterface) => {\n    if (!cell.isOpened) {\n        if (cell.isFlag) {\n            return '🚩';\n        }\n\n        return null;\n    }\n\n    if (cell.isBomb) {\n        if (cell.isFlag) {\n            return '✅';\n        }\n\n        return '💣';\n    }\n\n    return cell.bombCount || '';\n};\n\nconst Cell = ({ cell }: { cell: CellInterface }): ReactElement => {\n    useTagged(cell);\n\n    return (\n        <div\n            className={styles.cell}\n            style={{\n                top: cell.row * CELL_SIZE,\n                left: cell.col * CELL_SIZE,\n                width: CELL_SIZE,\n                height: CELL_SIZE,\n                background: cell.isOpened ? 'aliceblue' : 'lightgray',\n                color: CELL_COLOR[cell.bombCount || 0],\n                ...(cell.row === 0 ? { borderTop: '1px solid black' } : {}),\n                ...(cell.col === 0 ? { borderLeft: '1px solid black' } : {})\n            }}\n            onClick={() => {\n                open(cell);\n            }}\n            onDoubleClick={() => {\n                openNear(cell);\n            }}\n            onContextMenu={(event: MouseEvent) => {\n                event.preventDefault();\n\n                flag(cell);\n            }}\n        >\n            {getCellContent(cell)}\n        </div>\n    );\n};\n\nexport default Cell;\n","import startTimeState from '../states/startTimeState';\nimport endTimeState from '../states/endTimeState';\nimport gameOverState from '../states/gameOverState';\nimport initBoard from './initBoard';\n\nconst init = () => {\n    initBoard();\n    startTimeState(null);\n    endTimeState(null);\n    gameOverState(null);\n};\n\nexport default init;\n","import { useEffect } from 'react';\nimport { createEffect } from 'react-tagged-state';\nimport init from '../actions/init';\n\nconst useGenerateBoard = () => {\n    useEffect(\n        () =>\n            createEffect(() => {\n                init();\n            }),\n        []\n    );\n};\n\nexport default useGenerateBoard;\n","import { Fragment, ReactElement } from 'react';\nimport { useTagged } from 'react-tagged-state';\nimport boardState from '../../states/boardState';\nimport gameOverState from '../../states/gameOverState';\nimport useVirtualGrid from '../../hooks/useVirtualGrid';\nimport Cell from '../Cell/Cell';\nimport { CELL_SIZE } from '../constants';\nimport useGenerateBoard from '../../hooks/useGenerateBoard';\nimport styles from './Board.module.css';\n\nconst Board = (): ReactElement => {\n    const board = useTagged(boardState);\n    const gameOver = useTagged(gameOverState);\n    const [parentRef, renderedCells] = useVirtualGrid({ width: CELL_SIZE, height: CELL_SIZE, overscan: 5 });\n\n    useGenerateBoard();\n\n    if (!board) {\n        return <Fragment />;\n    }\n\n    const rows = board.length;\n    const cols = board[0].length;\n    const width = cols * CELL_SIZE;\n    const height = rows * CELL_SIZE;\n    const cells = [];\n\n    for (let row = renderedCells.fromRow; row < renderedCells.toRow && row < board.length; row++) {\n        for (let col = renderedCells.fromCol; col < renderedCells.toCol && col < board[0].length; col++) {\n            const cell = board[row][col];\n\n            cells.push(<Cell key={cell.id} cell={cell} />);\n        }\n    }\n\n    return (\n        <section ref={parentRef} className={styles.board}>\n            <div\n                className={styles.innerBoard}\n                style={{\n                    width,\n                    height,\n                    ...(gameOver ? { pointerEvents: 'none' } : {})\n                }}\n            />\n            {cells}\n        </section>\n    );\n};\n\nexport default Board;\n","import { useTagged } from 'react-tagged-state';\nimport { ReactElement } from 'react';\nimport widthState from '../states/widthState';\n\nconst WidthInput = (): ReactElement => {\n    const width = useTagged(widthState);\n\n    return (\n        <label>\n            Width:\n            <input\n                key={width}\n                defaultValue={width}\n                type=\"number\"\n                onBlur={(event: { target: HTMLInputElement }) => widthState(Math.max(8, +(event.target.value || 0)))}\n                min={8}\n            />\n        </label>\n    );\n};\n\nexport default WidthInput;\n","import { useTagged } from 'react-tagged-state';\nimport { ReactElement } from 'react';\nimport heightState from '../states/heightState';\n\nconst HeightInput = (): ReactElement => {\n    const height = useTagged(heightState);\n\n    return (\n        <label>\n            Height:\n            <input\n                key={height}\n                defaultValue={height}\n                type=\"number\"\n                onBlur={(event: { target: HTMLInputElement }) => heightState(Math.max(8, +(event.target.value || 0)))}\n                min={8}\n            />\n        </label>\n    );\n};\n\nexport default HeightInput;\n","import { useTagged } from 'react-tagged-state';\nimport { ReactElement } from 'react';\nimport bombCountState from '../states/bombCountState';\nimport widthState from '../states/widthState';\nimport heightState from '../states/heightState';\n\nconst BombCountInput = (): ReactElement => {\n    const bombCount = useTagged(bombCountState);\n    const width = useTagged(widthState);\n    const height = useTagged(heightState);\n\n    return (\n        <label>\n            Bomb count:\n            <input\n                key={bombCount}\n                defaultValue={bombCount}\n                type=\"number\"\n                onBlur={(event: { target: HTMLInputElement }) =>\n                    bombCountState(Math.min(Math.max(0, +(event.target.value || 0)), width * height - 1))\n                }\n                min={0}\n                max={width * height - 1}\n            />\n        </label>\n    );\n};\n\nexport default BombCountInput;\n","import { ReactElement } from 'react';\nimport WidthInput from '../WidthInput';\nimport HeightInput from '../HeightInput';\nimport BombCountInput from '../BombCountInput';\nimport styles from './Settings.module.css';\n\nconst Settings = (): ReactElement => (\n    <div className={styles.settings}>\n        <WidthInput />\n        <HeightInput />\n        <BombCountInput />\n    </div>\n);\n\nexport default Settings;\n","import { ReactElement, useEffect, useReducer } from 'react';\nimport { useTagged } from 'react-tagged-state';\nimport endTimeState from '../states/endTimeState';\nimport startTimeState from '../states/startTimeState';\n\nconst Timer = (): ReactElement => {\n    const [, forceUpdate] = useReducer((s) => s + 1, 0);\n    const startTime = useTagged(startTimeState);\n    const endTime = useTagged(endTimeState);\n\n    useEffect(() => {\n        let intervalId: any;\n\n        if (!endTime && !!startTime) {\n            intervalId = setInterval(() => {\n                forceUpdate();\n            }, 1000);\n        }\n\n        return () => {\n            clearInterval(intervalId);\n        };\n    }, [startTime, endTime]);\n\n    return <span>Time:{startTime ? Math.floor(((endTime || Date.now()) - startTime) / 1000) : 0}</span>;\n};\n\nexport default Timer;\n","import { useTagged } from 'react-tagged-state';\nimport { ReactElement } from 'react';\nimport gameOverState from '../states/gameOverState';\nimport init from '../actions/init';\n\nconst InitButton = (): ReactElement => {\n    const gameOver = useTagged(gameOverState);\n\n    return <button onClick={init}>{gameOver === 'win' ? '😎' : gameOver === 'lose' ? '😵' : '😊'}</button>;\n};\n\nexport default InitButton;\n","import { useTagged } from 'react-tagged-state';\nimport { ReactElement } from 'react';\nimport bombCountState from '../states/bombCountState';\nimport flagsState from '../states/flagsState';\nimport startTimeState from '../states/startTimeState';\n\nconst FlagCount = (): ReactElement => {\n    const bombCount = useTagged(bombCountState);\n    const flags = useTagged(flagsState);\n    const startTime = useTagged(startTimeState);\n\n    return <span>Flags:{startTime ? flags : bombCount}</span>;\n};\n\nexport default FlagCount;\n","import { ReactElement } from 'react';\nimport Timer from '../Timer';\nimport InitButton from '../InitButton';\nimport FlagCount from '../FlagCount';\nimport styles from './Statistics.module.css';\n\nconst Statistics = (): ReactElement => (\n    <div className={styles.statistics}>\n        <FlagCount />\n        <InitButton />\n        <Timer />\n    </div>\n);\n\nexport default Statistics;\n","import { ReactElement } from 'react';\nimport Board from './components/Board/Board';\nimport Settings from './components/Settings/Settings';\nimport Statistics from './components/Statistics/Statistics';\nimport styles from './App.module.css';\n\nconst App = (): ReactElement => (\n    <main className={styles.app}>\n        <Settings />\n        <Statistics />\n        <Board />\n    </main>\n);\n\nexport default App;\n","import { StrictMode } from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nrender(\n    <StrictMode>\n        <App />\n    </StrictMode>,\n    document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__1Y7VT\",\"innerBoard\":\"Board_innerBoard__2YZye\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__3-ueS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__3U6ep\"};"],"sourceRoot":""}