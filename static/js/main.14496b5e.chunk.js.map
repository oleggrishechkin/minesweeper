{"version":3,"sources":["states/boardState.ts","utils/getBombNearCount.ts","utils/openCell.ts","utils/copyBoard.ts","states/endTimeState.ts","states/gameOverState.ts","utils/flagBombs.ts","actions/win.ts","utils/openBombs.ts","actions/lose.ts","actions/open.ts","utils/getOpenNearStatus.ts","utils/openNearCells.ts","actions/openNear.ts","utils/flagCell.ts","actions/flag.ts","utils/getRandomPoint.ts","utils/generateBoardState.ts","states/widthState.ts","states/heightState.ts","states/bombCountState.ts","states/startTimeState.ts","actions/start.ts","components/Board/constants.ts","components/Board/Cell.tsx","components/Board/VirtualBoard.tsx","components/Board/Board.tsx","utils/minMax.ts","components/WidthInput.tsx","components/HeightInput.tsx","components/BombCountInput.tsx","components/Settings.tsx","components/Timer.tsx","actions/clear.ts","components/ClearButton.tsx","components/FlagCount.tsx","components/Statistics.tsx","App.tsx","index.tsx"],"names":["boardState","createSignal","getBombNearCount","board","targetCell","offsetY","res","offsetX","row","col","isBomb","openCell","boardCopy","currentCell","cell","itemsToOpen","length","pop","isOpened","isFlag","bombCount","cells","indexOf","push","copyBoard","endTimeState","gameOverState","openBombs","rowsCount","colsCount","win","Date","now","flagBombs","lose","open","getOpenNearStatus","flagsCount","isUnflagBombNear","openNearCells","openNear","flagCell","flags","flag","getRandomPoint","width","height","Math","floor","random","generateBoardState","excludeRow","excludeCol","minesCount","id","widthState","heightState","bombCountState","startTimeState","start","CELL_SIZE","HALF_CELL_SIZE","BOARD_ID","CELL_COLOR","1","2","3","4","5","6","7","8","Cell","memo","useLayoutEffect","ctx","document","getElementById","getContext","x","y","fillStyle","fillRect","font","textAlign","textBaseline","fillText","renderCell","VirtualBoard","parentRef","children","useState","state","setState","frameId","frame","current","rect","getBoundingClientRect","nextFromRow","max","scrollTop","nextToRow","ceil","nextFromCol","scrollLeft","nextToCol","currentState","requestAnimationFrame","cancelAnimationFrame","data","useMemo","rows","cols","StyledBoard","styled","section","getEventPoint","event","clientY","top","clientX","left","Board","ref","useRef","useTagged","gameOver","boardBoard","boardWidth","boardHeight","style","userSelect","cursor","pointerEvents","undefined","data-is-over","onClick","onDoubleClick","onContextMenu","preventDefault","minMax","min","value","WidthInput","defaultValue","type","onBlur","target","HeightInput","BombCountInput","StyledSettings","div","Settings","Timer","useReducer","s","forceUpdate","startTime","endTime","useEffect","intervalId","setInterval","clearInterval","clear","ClearButton","FlagCount","StyledStatistics","Statistics","StyledApp","main","App","render"],"mappings":"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","file":"static/js/main.14496b5e.chunk.js","sourcesContent":["import { createSignal } from 'react-tagged-state';\n\nexport interface Cell {\n    id: string;\n    row: number;\n    col: number;\n    bombCount: number | null;\n    isBomb: boolean;\n    isFlag: boolean;\n    isOpened: boolean;\n}\n\nexport interface BoardState {\n    board: Array<Array<Cell>>;\n    flags: number;\n    cells: number;\n}\n\nconst boardState = createSignal<BoardState | null>(null);\n\nexport default boardState;\n","import { BoardState, Cell } from '../states/boardState';\n\nconst getBombNearCount = (board: BoardState, targetCell: Cell): number | null => {\n    let res = 0;\n    let offsetX = -1;\n    let offsetY;\n    let cell;\n\n    for (; offsetX <= 1; ++offsetX) {\n        for (offsetY = -1; offsetY <= 1; ++offsetY) {\n            cell = board.board[offsetY + targetCell.row]?.[offsetX + targetCell.col];\n\n            if (cell?.isBomb) {\n                ++res;\n            }\n        }\n    }\n\n    return res || null;\n};\n\nexport default getBombNearCount;\n","import { BoardState, Cell } from '../states/boardState';\nimport getBombNearCount from './getBombNearCount';\n\nconst openCell = (boardCopy: BoardState, targetCell: Cell): BoardState => {\n    const itemsToOpen = [targetCell];\n    let currentCell;\n    let cell;\n    let offsetX;\n    let offsetY;\n\n    while (itemsToOpen.length) {\n        currentCell = itemsToOpen.pop();\n\n        if (!currentCell || currentCell.isOpened || currentCell.isFlag) {\n            continue;\n        }\n\n        currentCell = boardCopy.board[currentCell.row][currentCell.col] = {\n            ...currentCell,\n            isOpened: true,\n            bombCount: getBombNearCount(boardCopy, currentCell)\n        };\n        boardCopy.cells -= 1;\n\n        if (currentCell.bombCount) {\n            continue;\n        }\n\n        for (offsetX = -1; offsetX <= 1; ++offsetX) {\n            for (offsetY = -1; offsetY <= 1; ++offsetY) {\n                cell = boardCopy.board[offsetY + currentCell.row]?.[offsetX + currentCell.col];\n\n                if (cell && itemsToOpen.indexOf(cell) === -1 && !cell.isOpened && !cell.isFlag) {\n                    itemsToOpen.push(cell);\n                }\n            }\n        }\n    }\n\n    return boardCopy;\n};\n\nexport default openCell;\n","import { BoardState } from '../states/boardState';\n\nconst copyBoard = (board: BoardState): BoardState => ({\n    ...board,\n    board: [...board.board]\n});\n\nexport default copyBoard;\n","import { createSignal } from 'react-tagged-state';\n\nconst endTimeState = createSignal<number | null>(null);\n\nexport default endTimeState;\n","import { createSignal } from 'react-tagged-state';\n\nexport type GameOver = 'win' | 'lose' | null;\n\nconst gameOverState = createSignal<GameOver>(null);\n\nexport default gameOverState;\n","import { BoardState } from '../states/boardState';\n\nconst openBombs = (boardCopy: BoardState): BoardState => {\n    let row = 0;\n    let col;\n    const rowsCount = boardCopy.board.length;\n    const colsCount = boardCopy.board[0].length;\n\n    for (; row < rowsCount; ++row) {\n        for (col = 0; col < colsCount; col++) {\n            if (boardCopy.board[row][col].isBomb) {\n                boardCopy.board[row][col] = { ...boardCopy.board[row][col], isFlag: true };\n            }\n        }\n    }\n\n    return boardCopy;\n};\n\nexport default openBombs;\n","import endTimeState from '../states/endTimeState';\nimport gameOverState from '../states/gameOverState';\nimport boardState from '../states/boardState';\nimport flagBombs from '../utils/flagBombs';\nimport copyBoard from '../utils/copyBoard';\n\nconst win = (): void => {\n    endTimeState(Date.now());\n    gameOverState('win');\n    boardState((board) => board && flagBombs(copyBoard(board)));\n};\n\nexport default win;\n","import { BoardState } from '../states/boardState';\n\nconst openBombs = (boardCopy: BoardState): BoardState => {\n    let row = 0;\n    let col;\n    const rowsCount = boardCopy.board.length;\n    const colsCount = boardCopy.board[0].length;\n\n    for (; row < rowsCount; ++row) {\n        for (col = 0; col < colsCount; col++) {\n            if (boardCopy.board[row][col].isBomb) {\n                boardCopy.board[row][col] = { ...boardCopy.board[row][col], isOpened: true };\n            }\n        }\n    }\n\n    return boardCopy;\n};\n\nexport default openBombs;\n","import endTimeState from '../states/endTimeState';\nimport gameOverState from '../states/gameOverState';\nimport boardState from '../states/boardState';\nimport openBombs from '../utils/openBombs';\nimport copyBoard from '../utils/copyBoard';\n\nconst lose = (): void => {\n    endTimeState(Date.now());\n    gameOverState('lose');\n    boardState((board) => board && openBombs(copyBoard(board)));\n};\n\nexport default lose;\n","import boardState, { Cell } from '../states/boardState';\nimport openCell from '../utils/openCell';\nimport copyBoard from '../utils/copyBoard';\nimport win from './win';\nimport lose from './lose';\n\nconst open = (cell?: Cell): void => {\n    if (!cell || cell.isOpened || cell.isFlag) {\n        return;\n    }\n\n    if (cell.isBomb) {\n        lose();\n\n        return;\n    }\n\n    boardState((board) => board && openCell(copyBoard(board), cell));\n\n    if (boardState()?.cells === 0) {\n        win();\n    }\n};\n\nexport default open;\n","import { BoardState, Cell } from '../states/boardState';\n\nconst getOpenNearStatus = (board: BoardState | null, targetCell: Cell): -1 | 1 | 0 => {\n    if (!board) {\n        return 0;\n    }\n\n    let flagsCount = 0;\n    let isUnflagBombNear = false;\n    let offsetX = -1;\n    let offsetY;\n    let cell;\n\n    for (; offsetX <= 1; ++offsetX) {\n        for (offsetY = -1; offsetY <= 1; ++offsetY) {\n            cell = board.board[offsetY + targetCell.row]?.[offsetX + targetCell.col];\n\n            if (cell?.isFlag) {\n                flagsCount++;\n\n                continue;\n            }\n\n            if (cell?.isBomb) {\n                isUnflagBombNear = true;\n            }\n        }\n    }\n\n    return flagsCount === targetCell.bombCount ? (isUnflagBombNear ? -1 : 1) : 0;\n};\n\nexport default getOpenNearStatus;\n","import { BoardState, Cell } from '../states/boardState';\nimport openCell from './openCell';\n\nconst openNearCells = (boardCopy: BoardState, targetCell: Cell): BoardState => {\n    let offsetX = -1;\n    let offsetY;\n\n    for (; offsetX <= 1; ++offsetX) {\n        for (offsetY = -1; offsetY <= 1; ++offsetY) {\n            openCell(boardCopy, boardCopy.board[offsetY + targetCell.row]?.[offsetX + targetCell.col]);\n        }\n    }\n\n    return boardCopy;\n};\n\nexport default openNearCells;\n","import getOpenNearStatus from '../utils/getOpenNearStatus';\nimport boardState, { Cell } from '../states/boardState';\nimport openNearCells from '../utils/openNearCells';\nimport copyBoard from '../utils/copyBoard';\nimport win from './win';\nimport lose from './lose';\n\nconst openNear = (cell: Cell): void => {\n    switch (getOpenNearStatus(boardState(), cell)) {\n        case -1: {\n            lose();\n\n            return;\n        }\n        case 1: {\n            boardState((board) => board && openNearCells(copyBoard(board), cell));\n\n            if (boardState()?.cells === 0) {\n                win();\n            }\n        }\n    }\n};\n\nexport default openNear;\n","import { BoardState, Cell } from '../states/boardState';\n\nconst flagCell = (boardCopy: BoardState, cell: Cell): BoardState => {\n    const isFlag = cell.isFlag;\n\n    boardCopy.board[cell.row][cell.col] = { ...boardCopy.board[cell.row][cell.col], isFlag: !isFlag };\n    boardCopy.flags += isFlag ? 1 : -1;\n\n    return boardCopy;\n};\n\nexport default flagCell;\n","import boardState, { Cell } from '../states/boardState';\nimport flagCell from '../utils/flagCell';\nimport copyBoard from '../utils/copyBoard';\n\nconst flag = (cell: Cell): void => {\n    if (!cell.isOpened && (cell.isFlag || (boardState()?.flags || 0) > 0)) {\n        boardState((board) => board && flagCell(copyBoard(board), cell));\n    }\n};\n\nexport default flag;\n","const getRandomPoint = (width: number, height: number): [number, number] => [\n    Math.floor(Math.random() * height),\n    Math.floor(Math.random() * width)\n];\n\nexport default getRandomPoint;\n","import { BoardState } from '../states/boardState';\nimport getRandomPoint from './getRandomPoint';\n\nconst generateBoardState = (\n    width: number,\n    height: number,\n    bombCount: number,\n    excludeRow?: number,\n    excludeCol?: number\n): BoardState => {\n    const board: BoardState['board'] = [];\n    let minesCount = 0;\n    let row = 0;\n    let col;\n\n    for (; row < height; ++row) {\n        board[row] = [];\n\n        for (col = 0; col < width; ++col) {\n            board[row][col] = {\n                id: `[${row}][${col}]`,\n                row,\n                col,\n                bombCount: null,\n                isBomb: false,\n                isFlag: false,\n                isOpened: false\n            };\n        }\n    }\n\n    while (minesCount < bombCount) {\n        [row, col] = getRandomPoint(width, height);\n\n        if (!board[row][col].isBomb && (row !== excludeRow || excludeCol !== col)) {\n            board[row][col].isBomb = true;\n            ++minesCount;\n        }\n    }\n\n    return {\n        board,\n        flags: bombCount,\n        cells: width * height - bombCount\n    };\n};\n\nexport default generateBoardState;\n","import { createSignal } from 'react-tagged-state';\n\nconst widthState = createSignal<number>(30);\n\nexport default widthState;\n","import { createSignal } from 'react-tagged-state';\n\nconst heightState = createSignal<number>(16);\n\nexport default heightState;\n","import { createSignal } from 'react-tagged-state';\n\nconst bombCountState = createSignal<number>(99);\n\nexport default bombCountState;\n","import { createSignal } from 'react-tagged-state';\n\nconst startTimeState = createSignal<number | null>(null);\n\nexport default startTimeState;\n","import boardState from '../states/boardState';\nimport generateBoardState from '../utils/generateBoardState';\nimport widthState from '../states/widthState';\nimport heightState from '../states/heightState';\nimport bombCountState from '../states/bombCountState';\nimport startTimeState from '../states/startTimeState';\nimport open from './open';\n\nconst start = (row: number, col: number): void => {\n    boardState(generateBoardState(widthState(), heightState(), bombCountState(), row, col));\n    startTimeState(Date.now());\n\n    open(boardState()?.board[row][col]);\n};\n\nexport default start;\n","export const CELL_SIZE = 20;\n\nexport const HALF_CELL_SIZE = CELL_SIZE / 2;\n\nexport const BOARD_ID = 'BOARD_ID';\n\nexport const CELL_COLOR: Record<number, string> = {\n    1: 'blue',\n    2: 'green',\n    3: 'red',\n    4: 'purple',\n    5: 'maroon',\n    6: 'turquoise',\n    7: 'black',\n    8: 'gray'\n};\n","import { Fragment, memo, useLayoutEffect } from 'react';\nimport { Cell as CellInterface } from '../../states/boardState';\nimport { CELL_SIZE, HALF_CELL_SIZE, BOARD_ID, CELL_COLOR } from './constants';\n\nconst renderCell = (ctx: CanvasRenderingContext2D, { cell }: { cell: CellInterface }) => {\n    const x = cell.col * CELL_SIZE;\n    const y = cell.row * CELL_SIZE;\n\n    ctx.fillStyle = 'black';\n    ctx.fillRect(x, y, CELL_SIZE, CELL_SIZE);\n    ctx.fillStyle = cell.isOpened ? 'aliceblue' : 'lightgray';\n    ctx.fillRect(x, y, CELL_SIZE - 1, CELL_SIZE - 1);\n    ctx.font =\n        \"12px -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif\";\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    if (!cell.isOpened) {\n        if (cell.isFlag) {\n            ctx.fillText('🚩', x + HALF_CELL_SIZE - 1, y + HALF_CELL_SIZE);\n\n            return;\n        }\n\n        return;\n    }\n\n    if (cell.isBomb) {\n        if (cell.isFlag) {\n            ctx.fillText('✅', x + HALF_CELL_SIZE - 1, y + HALF_CELL_SIZE);\n\n            return;\n        }\n\n        ctx.fillText('💣', x + HALF_CELL_SIZE - 1, y + HALF_CELL_SIZE);\n\n        return;\n    }\n\n    if (!cell.bombCount) {\n        return;\n    }\n\n    if (CELL_COLOR[cell.bombCount]) {\n        ctx.fillStyle = CELL_COLOR[cell.bombCount];\n    }\n\n    ctx.fillText(`${cell.bombCount}`, x + HALF_CELL_SIZE - 1, y + HALF_CELL_SIZE);\n};\n\nconst Cell = memo<{ cell: CellInterface }>(({ cell }) => {\n    useLayoutEffect(() => {\n        const ctx = (document.getElementById(BOARD_ID) as HTMLCanvasElement).getContext('2d');\n\n        if (ctx) {\n            renderCell(ctx, { cell });\n        }\n    }, [cell]);\n\n    return <Fragment />;\n});\n\nexport default Cell;\n","import { ReactElement, RefObject, useLayoutEffect, useMemo, Fragment, useState } from 'react';\nimport { BoardState, Cell } from '../../states/boardState';\nimport { CELL_SIZE } from './constants';\n\nconst VirtualBoard = ({\n    parentRef,\n    board,\n    children\n}: {\n    parentRef: RefObject<HTMLElement>;\n    board: BoardState['board'];\n    children: (props: { cell: Cell }) => ReactElement;\n}): ReactElement => {\n    const [state, setState] = useState(() => [\n        [0, 0],\n        [0, 0]\n    ]);\n\n    useLayoutEffect(() => {\n        let frameId: any;\n        const frame = () => {\n            if (parentRef.current) {\n                const rect = parentRef.current.getBoundingClientRect();\n\n                const nextFromRow = Math.max(Math.floor(parentRef.current.scrollTop / CELL_SIZE), 0);\n                const nextToRow = Math.max(Math.ceil((parentRef.current.scrollTop + rect.height) / CELL_SIZE), 0);\n                const nextFromCol = Math.max(Math.floor(parentRef.current.scrollLeft / CELL_SIZE), 0);\n                const nextToCol = Math.max(Math.ceil((parentRef.current.scrollLeft + rect.width) / CELL_SIZE), 0);\n\n                setState((currentState) => {\n                    if (\n                        currentState[0][0] === nextFromRow &&\n                        currentState[0][1] === nextToRow &&\n                        currentState[1][0] === nextFromCol &&\n                        currentState[1][1] === nextToCol\n                    ) {\n                        return currentState;\n                    }\n\n                    return [\n                        [nextFromRow, nextToRow],\n                        [nextFromCol, nextToCol]\n                    ];\n                });\n            }\n            frameId = requestAnimationFrame(frame);\n        };\n\n        frame();\n\n        return () => {\n            cancelAnimationFrame(frameId);\n        };\n    }, [parentRef]);\n    const data = useMemo(() => {\n        const res = [];\n        let row = state[0][0];\n        let col;\n        const rows = board.length;\n        const cols = board[0].length;\n\n        for (; row < state[0][1] && row < rows; ++row) {\n            for (col = state[1][0]; col < state[1][1] && col < cols; ++col) {\n                res.push(children({ cell: board[row][col] }));\n            }\n        }\n\n        return res;\n    }, [board, children, state]);\n\n    return <Fragment>{data}</Fragment>;\n};\n\nexport default VirtualBoard;\n","import { ReactElement, MouseEvent, useRef } from 'react';\nimport { useTagged } from 'react-tagged-state';\nimport styled from 'styled-components';\nimport open from '../../actions/open';\nimport openNear from '../../actions/openNear';\nimport flag from '../../actions/flag';\nimport start from '../../actions/start';\nimport boardState from '../../states/boardState';\nimport gameOverState, { GameOver } from '../../states/gameOverState';\nimport widthState from '../../states/widthState';\nimport heightState from '../../states/heightState';\nimport generateBoardState from '../../utils/generateBoardState';\nimport Cell from './Cell';\nimport { CELL_SIZE, BOARD_ID } from './constants';\nimport VirtualBoard from './VirtualBoard';\n\nconst StyledBoard = styled.section`\n    display: flex;\n    overflow: auto;\n    max-width: 100%;\n    border-top: 1px solid black;\n    border-left: 1px solid black;\n`;\n\nconst getEventPoint = (event: MouseEvent) => {\n    const rect = document.getElementById(BOARD_ID)?.getBoundingClientRect();\n\n    if (!rect) {\n        return [0, 0];\n    }\n\n    return [Math.floor((event.clientY - rect.top) / CELL_SIZE), Math.floor((event.clientX - rect.left) / CELL_SIZE)];\n};\n\nconst Board = (): ReactElement => {\n    const ref = useRef<HTMLDivElement | null>(null);\n    const board = useTagged(boardState);\n    const gameOver = useTagged<GameOver>(gameOverState);\n    const width = useTagged<number>(widthState);\n    const height = useTagged<number>(heightState);\n    const boardBoard = board ? board.board : generateBoardState(width, height, 0).board;\n    const rows = boardBoard.length;\n    const cols = boardBoard[0].length;\n    const boardWidth = cols * CELL_SIZE;\n    const boardHeight = rows * CELL_SIZE;\n\n    return (\n        <StyledBoard ref={ref}>\n            <canvas\n                id={BOARD_ID}\n                style={{\n                    width: boardWidth,\n                    height: boardHeight,\n                    userSelect: 'none',\n                    cursor: 'pointer',\n                    pointerEvents: gameOver ? 'none' : undefined\n                }}\n                data-is-over={!!gameOver}\n                width={boardWidth}\n                height={boardHeight}\n                onClick={(event) => {\n                    const [row, col] = getEventPoint(event);\n\n                    if (board) {\n                        open(boardBoard[row][col]);\n\n                        return;\n                    }\n\n                    start(row, col);\n                }}\n                onDoubleClick={\n                    board\n                        ? (event: MouseEvent) => {\n                              const [row, col] = getEventPoint(event);\n\n                              openNear(boardBoard[row][col]);\n                          }\n                        : undefined\n                }\n                onContextMenu={\n                    board\n                        ? (event: MouseEvent) => {\n                              event.preventDefault();\n\n                              const [row, col] = getEventPoint(event);\n\n                              flag(boardBoard[row][col]);\n                          }\n                        : undefined\n                }\n            />\n            <VirtualBoard parentRef={ref} board={boardBoard}>\n                {({ cell }) => <Cell key={cell.id} cell={cell} />}\n            </VirtualBoard>\n        </StyledBoard>\n    );\n};\n\nexport default Board;\n","const minMax = (min: number, value: number, max: number): number => Math.max(Math.min(value, max), min);\n\nexport default minMax;\n","import { useTagged } from 'react-tagged-state';\nimport { ReactElement } from 'react';\nimport widthState from '../states/widthState';\nimport minMax from '../utils/minMax';\n\nconst MAX = 819;\n\nconst WidthInput = (): ReactElement => {\n    const width = useTagged(widthState);\n\n    return (\n        <label>\n            Width:\n            <input\n                key={width}\n                defaultValue={width}\n                type=\"number\"\n                onBlur={(event: { target: HTMLInputElement }) => widthState(minMax(8, +(event.target.value || 0), MAX))}\n                min={8}\n                max={MAX}\n            />\n        </label>\n    );\n};\n\nexport default WidthInput;\n","import { useTagged } from 'react-tagged-state';\nimport { ReactElement } from 'react';\nimport heightState from '../states/heightState';\nimport minMax from '../utils/minMax';\n\nconst MAX = 819;\n\nconst HeightInput = (): ReactElement => {\n    const height = useTagged(heightState);\n\n    return (\n        <label>\n            Height:\n            <input\n                key={height}\n                defaultValue={height}\n                type=\"number\"\n                onBlur={(event: { target: HTMLInputElement }) =>\n                    heightState(minMax(1, +(event.target.value || 0), MAX))\n                }\n                min={8}\n                max={MAX}\n            />\n        </label>\n    );\n};\n\nexport default HeightInput;\n","import { useTagged } from 'react-tagged-state';\nimport { ReactElement } from 'react';\nimport bombCountState from '../states/bombCountState';\nimport widthState from '../states/widthState';\nimport heightState from '../states/heightState';\nimport minMax from '../utils/minMax';\n\nconst BombCountInput = (): ReactElement => {\n    const bombCount = useTagged(bombCountState);\n    const width = useTagged(widthState);\n    const height = useTagged(heightState);\n\n    return (\n        <label>\n            Bomb count:\n            <input\n                key={bombCount}\n                defaultValue={bombCount}\n                type=\"number\"\n                onBlur={(event: { target: HTMLInputElement }) =>\n                    bombCountState(minMax(0, +(event.target.value || 0), width * height - 1))\n                }\n                min={0}\n                max={width * height - 1}\n            />\n        </label>\n    );\n};\n\nexport default BombCountInput;\n","import styled from 'styled-components';\nimport { ReactElement } from 'react';\nimport WidthInput from './WidthInput';\nimport HeightInput from './HeightInput';\nimport BombCountInput from './BombCountInput';\n\nconst StyledSettings = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 10px;\n    flex-wrap: wrap;\n`;\n\nconst Settings = (): ReactElement => (\n    <StyledSettings>\n        <WidthInput />\n        <HeightInput />\n        <BombCountInput />\n    </StyledSettings>\n);\n\nexport default Settings;\n","import { ReactElement, useEffect, useReducer } from 'react';\nimport { useTagged } from 'react-tagged-state';\nimport endTimeState from '../states/endTimeState';\nimport startTimeState from '../states/startTimeState';\n\nconst Timer = (): ReactElement => {\n    const [, forceUpdate] = useReducer((s) => s + 1, 0);\n    const startTime = useTagged(startTimeState);\n    const endTime = useTagged(endTimeState);\n\n    useEffect(() => {\n        let intervalId: any;\n\n        if (!endTime && !!startTime) {\n            intervalId = setInterval(() => {\n                forceUpdate();\n            }, 1000);\n        }\n\n        return () => {\n            clearInterval(intervalId);\n        };\n    }, [startTime, endTime]);\n\n    return <span>Time:{startTime ? Math.floor(((endTime || Date.now()) - startTime) / 1000) : 0}</span>;\n};\n\nexport default Timer;\n","import boardState from '../states/boardState';\nimport startTimeState from '../states/startTimeState';\nimport endTimeState from '../states/endTimeState';\nimport gameOverState from '../states/gameOverState';\n\nconst clear = (): void => {\n    boardState(null);\n    startTimeState(null);\n    endTimeState(null);\n    gameOverState(null);\n};\n\nexport default clear;\n","import { useTagged } from 'react-tagged-state';\nimport { ReactElement } from 'react';\nimport gameOverState from '../states/gameOverState';\nimport clear from '../actions/clear';\n\nconst ClearButton = (): ReactElement => {\n    const gameOver = useTagged(gameOverState);\n\n    return <button onClick={clear}>{gameOver === 'win' ? '😎' : gameOver === 'lose' ? '😵' : '😊'}</button>;\n};\n\nexport default ClearButton;\n","import { useTagged } from 'react-tagged-state';\nimport { ReactElement } from 'react';\nimport bombCountState from '../states/bombCountState';\nimport boardState from '../states/boardState';\n\nconst FlagCount = (): ReactElement => {\n    const bombCount = useTagged(bombCountState);\n    const flags = useTagged(() => boardState()?.flags);\n\n    return <span>Flags:{typeof flags === 'number' ? flags : bombCount}</span>;\n};\n\nexport default FlagCount;\n","import styled from 'styled-components';\nimport { ReactElement } from 'react';\nimport Timer from './Timer';\nimport ClearButton from './ClearButton';\nimport FlagCount from './FlagCount';\n\nconst StyledStatistics = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 10px;\n`;\n\nconst Statistics = (): ReactElement => (\n    <StyledStatistics>\n        <FlagCount />\n        <ClearButton />\n        <Timer />\n    </StyledStatistics>\n);\n\nexport default Statistics;\n","import styled from 'styled-components';\nimport { ReactElement } from 'react';\nimport Board from './components/Board/Board';\nimport Settings from './components/Settings';\nimport Statistics from './components/Statistics';\n\nconst StyledApp = styled.main`\n    display: flex;\n    flex-direction: column;\n    margin: auto;\n    height: calc(100vh - 20px);\n    padding-top: 20px;\n    width: calc(100vw - 40px);\n    align-items: center;\n`;\n\nconst App = (): ReactElement => (\n    <StyledApp>\n        <Settings />\n        <Statistics />\n        <Board />\n    </StyledApp>\n);\n\nexport default App;\n","import { StrictMode } from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nrender(\n    <StrictMode>\n        <App />\n    </StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}